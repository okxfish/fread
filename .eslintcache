[{"D:\\workspace\\project-personal\\fread\\src\\index.tsx":"1","D:\\workspace\\project-personal\\fread\\src\\App.tsx":"2","D:\\workspace\\project-personal\\fread\\src\\context\\viewType.ts":"3","D:\\workspace\\project-personal\\fread\\src\\component\\bookFilp\\index.tsx":"4","D:\\workspace\\project-personal\\fread\\src\\page\\home\\index.tsx":"5","D:\\workspace\\project-personal\\fread\\src\\utils\\useSearchParma.tsx":"6","D:\\workspace\\project-personal\\fread\\src\\page\\home\\sideBar.tsx":"7","D:\\workspace\\project-personal\\fread\\src\\page\\feed\\index.tsx":"8","D:\\workspace\\project-personal\\fread\\src\\page\\home\\sideBarItem.tsx":"9","D:\\workspace\\project-personal\\fread\\src\\page\\feed\\container.tsx":"10","D:\\workspace\\project-personal\\fread\\src\\context\\article.ts":"11","D:\\workspace\\project-personal\\fread\\src\\context\\feed.ts":"12","D:\\workspace\\project-personal\\fread\\src\\page\\feed\\utils.ts":"13","D:\\workspace\\project-personal\\fread\\src\\page\\feed\\reducer.ts":"14","D:\\workspace\\project-personal\\fread\\src\\page\\feed\\component.tsx":"15","D:\\workspace\\project-personal\\fread\\src\\mock\\feed.ts":"16","D:\\workspace\\project-personal\\fread\\src\\component\\articlePane\\index.tsx":"17","D:\\workspace\\project-personal\\fread\\src\\component\\feedsPane\\index.tsx":"18","D:\\workspace\\project-personal\\fread\\src\\component\\overviewPane\\index.tsx":"19","D:\\workspace\\project-personal\\fread\\src\\component\\overviewPane\\overviewCell.tsx":"20","D:\\workspace\\project-personal\\fread\\src\\component\\feedsPane\\feedItem.tsx":"21","D:\\workspace\\project-personal\\fread\\src\\utils\\useInoreaderToken.tsx":"22","D:\\workspace\\project-personal\\fread\\src\\api\\index.ts":"23","D:\\workspace\\project-personal\\fread\\src\\api\\auth.ts":"24","D:\\workspace\\project-personal\\fread\\src\\api\\inoreader.ts":"25","D:\\workspace\\project-personal\\fread\\src\\page\\oauth\\index.tsx":"26","D:\\workspace\\project-personal\\fread\\src\\page\\login\\index.tsx":"27"},{"size":978,"mtime":1622016836101,"results":"28","hashOfConfig":"29"},{"size":2351,"mtime":1622022034758,"results":"30","hashOfConfig":"29"},{"size":182,"mtime":1621246550473,"results":"31","hashOfConfig":"29"},{"size":805,"mtime":1612252247969,"results":"32","hashOfConfig":"29"},{"size":995,"mtime":1622021934139,"results":"33","hashOfConfig":"29"},{"size":1027,"mtime":1612252247985,"results":"34","hashOfConfig":"29"},{"size":6143,"mtime":1621579317809,"results":"35","hashOfConfig":"29"},{"size":63,"mtime":1612252247969,"results":"36","hashOfConfig":"29"},{"size":1356,"mtime":1621217148980,"results":"37","hashOfConfig":"29"},{"size":8349,"mtime":1622077749870,"results":"38","hashOfConfig":"29"},{"size":93,"mtime":1612252247969,"results":"39","hashOfConfig":"29"},{"size":90,"mtime":1612252247969,"results":"40","hashOfConfig":"29"},{"size":400,"mtime":1621590502711,"results":"41","hashOfConfig":"29"},{"size":426,"mtime":1622005396662,"results":"42","hashOfConfig":"29"},{"size":3745,"mtime":1622077749869,"results":"43","hashOfConfig":"29"},{"size":862,"mtime":1612255449421,"results":"44","hashOfConfig":"29"},{"size":2525,"mtime":1622018278665,"results":"45","hashOfConfig":"29"},{"size":4545,"mtime":1622077749868,"results":"46","hashOfConfig":"29"},{"size":8438,"mtime":1621562589381,"results":"47","hashOfConfig":"29"},{"size":775,"mtime":1612252247969,"results":"48","hashOfConfig":"29"},{"size":4692,"mtime":1622082021764,"results":"49","hashOfConfig":"29"},{"size":752,"mtime":1621131213173,"results":"50","hashOfConfig":"29"},{"size":1623,"mtime":1621324267296,"results":"51","hashOfConfig":"29"},{"size":391,"mtime":1621131213162,"results":"52","hashOfConfig":"29"},{"size":3913,"mtime":1622015494060,"results":"53","hashOfConfig":"29"},{"size":607,"mtime":1621131213172,"results":"54","hashOfConfig":"29"},{"size":2163,"mtime":1621131213171,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"na5k5m",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"D:\\workspace\\project-personal\\fread\\src\\index.tsx",[],["118","119"],"D:\\workspace\\project-personal\\fread\\src\\App.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\context\\viewType.ts",[],"D:\\workspace\\project-personal\\fread\\src\\component\\bookFilp\\index.tsx",["120"],"import React, { useEffect } from \"react\";\r\nimport { useInterval, useToggle } from \"react-use\";\r\nimport \"./style.css\";\r\n\r\nconst BookFilp = () => {\r\n  const [isFilpEnd, toggle] = useToggle(false);\r\n\r\n  useEffect(() => {\r\n    toggle();\r\n  }, []);\r\n\r\n  useInterval(() => {\r\n    toggle();\r\n  }, 167 * 7);\r\n\r\n  return (\r\n    <div className={`book ${isFilpEnd ? \"filp-end\" : \"\"}`}>\r\n      <div className=\"back bg-gray-500\"></div>\r\n      <div className=\"book-page page6\"></div>\r\n      <div className=\"book-page page5\"></div>\r\n      <div className=\"book-page page4\"></div>\r\n      <div className=\"book-page page3\"></div>\r\n      <div className=\"book-page page2\"></div>\r\n      <div className=\"book-page page1\"></div>\r\n      <div className=\"front bg-gray-500\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookFilp;\r\n","D:\\workspace\\project-personal\\fread\\src\\page\\home\\index.tsx",["121"],"import React, { useState } from \"react\";\r\nimport { default as FeedPage } from \"../feed\";\r\nimport { useWindowSize } from \"react-use\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./style.css\";\r\nimport SideBar from \"./sideBar\";\r\n\r\nconst Home = () => {\r\n  const { height: windowHeight } = useWindowSize();\r\n  const [isOverViewPaneOpen, setIsOverViewPaneOpen] = useState<boolean>(false);\r\n  const emptyRender = (): React.ReactElement | null => null;\r\n\r\n  return (\r\n    <div\r\n      className=\"home__layout overflow-hidden\"\r\n      style={{ height: windowHeight }}\r\n    >\r\n      <SideBar setIsOverViewPaneOpen={setIsOverViewPaneOpen} />\r\n      <Switch>\r\n        <Route\r\n          path={[\"/feed/:options\", \"/feed\"]}\r\n          render={() => (\r\n            <FeedPage\r\n              isOverViewPaneOpen={isOverViewPaneOpen}\r\n              setIsOverViewPaneOpen={setIsOverViewPaneOpen}\r\n            />\r\n          )}\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\workspace\\project-personal\\fread\\src\\utils\\useSearchParma.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\page\\home\\sideBar.tsx",["122"],"import {\r\n  ContextualMenuItemType,\r\n  DirectionalHint,\r\n  IContextualMenuProps,\r\n  IIconProps,\r\n  Toggle,\r\n} from \"@fluentui/react\";\r\nimport React, { SetStateAction, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useParams,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport { ViewType, ViewTypeContext } from \"../../context/viewType\";\r\nimport SideBarItem from \"./sideBarItem\";\r\nimport classnames from \"classnames\";\r\nimport queryString from \"query-string\";\r\n\r\nconst globalNavButtonIcon: IIconProps = { iconName: \"GlobalNavButton\" };\r\nconst filterIcon: IIconProps = { iconName: \"Filter\" };\r\nconst homeIcon: IIconProps = { iconName: \"Home\" };\r\nconst syncIcon: IIconProps = { iconName: \"Sync\" };\r\nconst contactIcon: IIconProps = { iconName: \"Contact\" };\r\nconst viewIcon: IIconProps = { iconName: \"View\" };\r\n\r\nexport interface Props {\r\n  className?: string;\r\n  setIsOverViewPaneOpen: React.Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst SideBar = ({ className, setIsOverViewPaneOpen }: Props) => {\r\n  const [isSidePaneOpen, setIsSidePaneOpen] = useState<boolean>(false);\r\n  const [isLoaddingFeeds, setIsLoaddingFeeds] = useState<boolean>(false);\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    let timeout;\r\n    if (isLoaddingFeeds) {\r\n      timeout = setTimeout(() => setIsLoaddingFeeds(false), 2000);\r\n    }\r\n    return () => clearTimeout(timeout);\r\n  }, [isLoaddingFeeds]);\r\n\r\n  const { setViewType } = useContext(ViewTypeContext);\r\n\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const toggleSidePane = (): void => setIsSidePaneOpen(!isSidePaneOpen);\r\n\r\n  const handleFeedClick = () => {\r\n    history.replace(\"/feed\");\r\n  };\r\n\r\n  const handleFilterClick = () => {\r\n    setIsOverViewPaneOpen(true);\r\n  };\r\n\r\n  const handleSyncClick = () => {\r\n    setIsLoaddingFeeds(true);\r\n  };\r\n\r\n  const handleProfileClick = async () => {};\r\n\r\n  const handleHamburgerMenuBtnClick = () => {\r\n    toggleSidePane();\r\n  };\r\n\r\n  const menuProps: IContextualMenuProps = {\r\n    alignTargetEdge: true,\r\n    directionalHint: DirectionalHint.rightTopEdge,\r\n    items: [\r\n      {\r\n        key: \"UnreadOnly\",\r\n        onRender: () => {\r\n          const qs = queryString.parse(location.search);\r\n          qs[\"unreadOnly\"] = qs[\"unreadOnly\"] === \"1\" ? \"0\" : \"1\";\r\n          const onChange = () => {\r\n            history.push({\r\n              pathname: \"/feed\",\r\n              search: queryString.stringify(qs),\r\n            });\r\n          };\r\n\r\n          return (\r\n            <div>\r\n              <Toggle\r\n                className=\"p-2 pb-0\"\r\n                label=\"Unread Only\"\r\n                inlineLabel\r\n                onChange={onChange}\r\n                checked={qs[\"unreadOnly\"] === \"0\"}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        key: \"Views\",\r\n        itemType: ContextualMenuItemType.Header,\r\n        onRenderIcon: () => null,\r\n        text: \"Views\",\r\n      },\r\n      {\r\n        key: \"cardView\",\r\n        text: \"card view\",\r\n        iconProps: { iconName: \"GridViewMedium\" },\r\n        onClick: () => setViewType(ViewType.card),\r\n      },\r\n      {\r\n        key: \"listView\",\r\n        text: \"list view\",\r\n        iconProps: { iconName: \"GroupedList\" },\r\n        onClick: () => setViewType(ViewType.list),\r\n      },\r\n      {\r\n        key: \"splitView\",\r\n        text: \"split view\",\r\n        iconProps: { iconName: \"ColumnRightTwoThirds\" },\r\n        onClick: () => setViewType(ViewType.threeway),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const profileMenuProps: IContextualMenuProps = {\r\n    alignTargetEdge: true,\r\n    directionalHint: DirectionalHint.rightTopEdge,\r\n    items: [\r\n      {\r\n        key: \"logoff\",\r\n        text: \"logoff\",\r\n        iconProps: { iconName: \"SignOut\" },\r\n        onClick: () => localStorage.removeItem('inoreaderToken'),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classnames(\r\n        \"flex items-center col-start-1 z-50 bg-gray-900 transition-all\",\r\n        \"justify-between col-span-4 row-start-3 row-span-1\",\r\n        \"sm:flex-col sm:justify-start sm:col-span-1 sm:row-start-1 sm:row-span-3\",\r\n        {\r\n          \"sm:w-48 col-span-2\": isSidePaneOpen,\r\n          \"sm:w-full\": !isSidePaneOpen,\r\n        },\r\n        className\r\n      )}\r\n    >\r\n      <SideBarItem\r\n        className=\"hidden sm:block\"\r\n        iconProps={globalNavButtonIcon}\r\n        isIconOnly={!isSidePaneOpen}\r\n        content=\"\"\r\n        onClick={handleHamburgerMenuBtnClick}\r\n      >\r\n        {\"\"}\r\n      </SideBarItem>\r\n      <SideBarItem\r\n        className={pathname === \"/feed\" ? \"hidden sm:block\" : \"\"}\r\n        iconProps={homeIcon}\r\n        isIconOnly={!isSidePaneOpen}\r\n        onClick={handleFeedClick}\r\n      >\r\n        feed\r\n      </SideBarItem>\r\n      <SideBarItem\r\n        className=\"block sm:hidden\"\r\n        iconProps={filterIcon}\r\n        isIconOnly={true}\r\n        onClick={handleFilterClick}\r\n      >\r\n        filter\r\n      </SideBarItem>\r\n      <SideBarItem\r\n        iconProps={viewIcon}\r\n        menuProps={menuProps}\r\n        isIconOnly={!isSidePaneOpen}\r\n      >\r\n        view\r\n      </SideBarItem>\r\n      <div className=\"hidden sm:block flex-1 flex-col w-full my-8\">\r\n        <Switch>\r\n          <Route\r\n            path={[\"/feed/:options\", \"/feed\"]}\r\n            render={() => (\r\n              <>\r\n                <SideBarItem\r\n                  iconProps={syncIcon}\r\n                  isIconOnly={!isSidePaneOpen}\r\n                  content=\"\"\r\n                  styles={{\r\n                    icon: isLoaddingFeeds ? \"fr-spin\" : \"\",\r\n                  }}\r\n                  onClick={handleSyncClick}\r\n                >\r\n                  sync\r\n                </SideBarItem>\r\n              </>\r\n            )}\r\n          />\r\n        </Switch>\r\n      </div>\r\n      <SideBarItem\r\n        className=\"hidden sm:block\"\r\n        iconProps={contactIcon}\r\n        isIconOnly={!isSidePaneOpen}\r\n        menuProps={profileMenuProps}\r\n        content=\"\"\r\n        onClick={handleProfileClick}\r\n      >\r\n        profile\r\n      </SideBarItem>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","D:\\workspace\\project-personal\\fread\\src\\page\\feed\\index.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\page\\home\\sideBarItem.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\page\\feed\\container.tsx",["123"],"import React, {\r\n  SetStateAction,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useReducer,\r\n  useState,\r\n} from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useSearchParam } from \"../../utils/useSearchParma\";\r\nimport { useQuery, useQueryClient } from \"react-query\";\r\nimport { default as api } from \"../../api\";\r\n\r\nimport { ViewTypeContext, ViewType } from \"../../context/viewType\";\r\nimport { ArticleContext } from \"../../context/article\";\r\nimport { FeedContext } from \"../../context/feed\";\r\n\r\nimport FeedPageComponent from \"./component\";\r\nimport { FeedItem, FeedProps } from \"../../component/feedsPane/types\";\r\n\r\nimport { normalize, NormalizedSchema, schema } from \"normalizr\";\r\n\r\nimport { initState, reducer } from \"./reducer\";\r\nimport { filterImgSrcfromHtmlStr } from \"./utils\";\r\n\r\nimport { default as get } from \"lodash.get\";\r\nimport { SystemStreamIDs } from \"../../api/inoreader\";\r\n\r\nimport { produce } from \"immer\";\r\nimport { Dayjs, default as dayjs } from \"dayjs\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n  isOverViewPaneOpen: boolean;\r\n  setIsOverViewPaneOpen: React.Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst article = new schema.Entity<FeedProps>(\"article\");\r\n\r\ninterface ArticleEntity {\r\n  article: { [key: string]: FeedProps };\r\n}\r\n\r\nconst FeedContainer = ({\r\n  className,\r\n  isOverViewPaneOpen,\r\n  setIsOverViewPaneOpen,\r\n}: Props) => {\r\n  const [state, dispatch] = useReducer(reducer, initState);\r\n  const [isArticleModalOpen, setIsArticleModalOpen] = useState<boolean>(false);\r\n  const { viewType } = useContext(ViewTypeContext);\r\n  const location = useLocation();\r\n\r\n  const streamId = useSearchParam(\"streamId\") || \"\";\r\n  const unreadOnly = useSearchParam(\"unreadOnly\") || \"0\";\r\n\r\n  const openOverviewPane = useCallback(\r\n    () => setIsOverViewPaneOpen(true),\r\n    [setIsOverViewPaneOpen]\r\n  );\r\n\r\n  const closeOverviewPane = useCallback(\r\n    () => setIsOverViewPaneOpen(false),\r\n    [setIsOverViewPaneOpen]\r\n  );\r\n\r\n  // 打开文章弹窗\r\n  const openArticleModal = (): void => setIsArticleModalOpen(true);\r\n  // 关闭文章弹窗\r\n  const closeArticleModal = (): void => setIsArticleModalOpen(false);\r\n\r\n  // 切换当前的订阅源的时候关闭订阅源选择菜单\r\n  useEffect(() => {\r\n    closeOverviewPane();\r\n  }, [location.search, closeOverviewPane]);\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  // 通过文章的 id 修改对应的文章实体的属性\r\n  const setArticleDataById = useCallback(\r\n    (articleId: string, updater: any): void =>\r\n      queryClient.setQueryData(\r\n        [\"feed/streamContentQuery\", streamId, unreadOnly],\r\n        produce((data) => {\r\n          const article = get(data, `entities.article['${articleId}']`);\r\n          if (typeof article !== \"undefined\") {\r\n            updater(article);\r\n          }\r\n        })\r\n      ),\r\n    [queryClient, streamId, unreadOnly]\r\n  );\r\n\r\n  // 切换文章的是否已读状态\r\n  const toggleReadById = useCallback(\r\n    (articleId: string) => {\r\n      setArticleDataById(articleId, (article) => {\r\n        article.isRead = !article.isRead;\r\n      });\r\n    },\r\n    [setArticleDataById]\r\n  );\r\n\r\n  // 切换文章的是否加星状态\r\n  const toggleStarById = useCallback(\r\n    (articleId: string) => {\r\n      setArticleDataById(articleId, (article) => {\r\n        article.isStar = !article.isStar;\r\n      });\r\n    },\r\n    [setArticleDataById]\r\n  );\r\n\r\n  // 从服务器获取 feed 流，并且将响应数据转换成组件的状态，将数据范式化\r\n  const streamContentQueryKey = [\r\n    \"feed/streamContentQuery\",\r\n    streamId,\r\n    unreadOnly,\r\n  ];\r\n\r\n  const openArticleInner = useCallback(\r\n    (articleId: string) => {\r\n      const prevArticleId: string = state.currenActivedFeedId;\r\n      console.log(prevArticleId, articleId);\r\n      if (prevArticleId !== articleId) {\r\n        if (prevArticleId !== \"\") {\r\n          setArticleDataById(prevArticleId, (article) => {\r\n            article.isInnerArticleShow = false;\r\n          });\r\n        }\r\n        setArticleDataById(articleId, (article) => {\r\n          article.isInnerArticleShow = true;\r\n        });\r\n      } else {\r\n        setArticleDataById(articleId, (article) => {\r\n          article.isInnerArticleShow = false;\r\n        });\r\n      }\r\n    },\r\n    [state.currenActivedFeedId, setArticleDataById]\r\n  );\r\n\r\n  const displayArticle = useCallback(\r\n    (articleId) => {\r\n      if (viewType === ViewType.list) {\r\n        openArticleInner(articleId);\r\n      } else if (viewType !== ViewType.threeway) {\r\n        openArticleModal();\r\n      }\r\n    },\r\n    [viewType, openArticleInner]\r\n  );\r\n\r\n  const markAsRead = useCallback(\r\n    (articleId: string) =>\r\n      setArticleDataById(articleId, (article) => {\r\n        article.isRead = true;\r\n      }),\r\n    [setArticleDataById]\r\n  );\r\n\r\n  const handleArticleItemClick = useCallback(\r\n    (item, index, e) => {\r\n      const articleId = item.id;\r\n      dispatch({\r\n        type: \"feed/ById/changeCurrentActivedFeedId\",\r\n        payload: articleId,\r\n      });\r\n      displayArticle(articleId);\r\n      markAsRead(articleId);\r\n    },\r\n    [displayArticle, markAsRead]\r\n  );\r\n\r\n  const handleArticleItemStar = useCallback(\r\n    (item, index, e) => {\r\n      if (e) {\r\n        e.stopPropagation();\r\n      }\r\n      toggleStarById(item.id);\r\n    },\r\n    [toggleStarById]\r\n  );\r\n\r\n  const handleArticleItemRead = useCallback(\r\n    (item, index, e) => {\r\n      if (e) {\r\n        e.stopPropagation();\r\n      }\r\n      toggleReadById(item.id);\r\n    },\r\n    [toggleReadById]\r\n  );\r\n\r\n  const handleArticleItemInnerArticleClose = useCallback(\r\n    (item, index, e) => {\r\n      setArticleDataById(item.id, (article) => {\r\n        article.isInnerArticleShow = false;\r\n      });\r\n    },\r\n    [setArticleDataById]\r\n  );\r\n\r\n  const streamContentQuery = useQuery<\r\n    NormalizedSchema<ArticleEntity, string[]>\r\n  >(\r\n    streamContentQueryKey,\r\n    async ({ queryKey: [key, streamId, unreadOnly] }) => {\r\n      const { data } = await api.inoreader.getStreamContents(String(streamId), {\r\n        exclude: unreadOnly === \"1\" ? SystemStreamIDs.READ : \"\",\r\n      });\r\n\r\n      const transformedData: FeedItem[] = data.items.map((item, index) => {\r\n        const publishedTime: Dayjs = dayjs.unix(item.published);\r\n        const thumbnailSrc = filterImgSrcfromHtmlStr(item.summary.content);\r\n        return {\r\n          id: item.id,\r\n          title: item.title,\r\n          summary: \"\",\r\n          thumbnailSrc: thumbnailSrc,\r\n          content: item.summary.content,\r\n          sourceName: item.origin.title,\r\n          sourceID: item.origin.streamId,\r\n          url: item.canonical[0].href,\r\n          publishedTime: publishedTime,\r\n          isRead: false,\r\n          isStar: false,\r\n          isInnerArticleShow: false,\r\n        };\r\n      });\r\n\r\n      const normalizeData = normalize<FeedProps, ArticleEntity, string[]>(\r\n        transformedData,\r\n        [article]\r\n      );\r\n      return normalizeData;\r\n    },\r\n    {\r\n      onError: (error) => {\r\n        console.error(error);\r\n      },\r\n      placeholderData: { entities: { article: {} }, result: [] },\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n\r\n  const { currenActivedFeedId } = state;\r\n  const activedArticle = get(\r\n    streamContentQuery.data,\r\n    `entities.article['${currenActivedFeedId}']`\r\n  );\r\n\r\n  const streamContents = streamContentQuery.data?.result.map(\r\n    (feedId) => streamContentQuery.data?.entities.article[feedId]\r\n  );\r\n\r\n  return (\r\n    <FeedContext.Provider\r\n      value={{ state, dispatch, streamContents: streamContents }}\r\n    >\r\n      <ArticleContext.Provider value={activedArticle}>\r\n        <FeedPageComponent\r\n          className={className}\r\n          article={activedArticle}\r\n          viewType={viewType}\r\n          isArticleModalOpen={isArticleModalOpen}\r\n          isOverViewPaneOpen={isOverViewPaneOpen}\r\n          isFetching={streamContentQuery.isFetching}\r\n          openOverviewPane={openOverviewPane}\r\n          closeOverviewPane={closeOverviewPane}\r\n          openArticleModal={openArticleModal}\r\n          closeArticleModal={closeArticleModal}\r\n          onFeedClick={handleArticleItemClick}\r\n          onFeedStar={handleArticleItemStar}\r\n          onFeedRead={handleArticleItemRead}\r\n        />\r\n      </ArticleContext.Provider>\r\n    </FeedContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FeedContainer;\r\n","D:\\workspace\\project-personal\\fread\\src\\context\\article.ts",[],"D:\\workspace\\project-personal\\fread\\src\\context\\feed.ts",[],"D:\\workspace\\project-personal\\fread\\src\\page\\feed\\utils.ts",[],"D:\\workspace\\project-personal\\fread\\src\\page\\feed\\reducer.ts",[],"D:\\workspace\\project-personal\\fread\\src\\page\\feed\\component.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\mock\\feed.ts",[],["124","125"],"D:\\workspace\\project-personal\\fread\\src\\component\\articlePane\\index.tsx",["126"],"import React, {\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport { IconButton, IIconProps } from \"office-ui-fabric-react\";\r\nimport { Parser as HtmlToReactParser } from \"html-to-react\";\r\nimport { FeedItem } from \"./../feedsPane/types\";\r\nimport { default as dayjs } from \"dayjs\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n  closeModal?(): any;\r\n  article?: FeedItem;\r\n  style?: {\r\n    [prop: string]: string;\r\n  };\r\n}\r\n\r\nconst backIcon: IIconProps = { iconName: \"Back\" };\r\n\r\nconst ArticlePane = forwardRef(\r\n  ({ className, style, article, closeModal }: Props, ref) => {\r\n    const htmlToReactParserRef = useRef(new HtmlToReactParser());\r\n    const [contentJSX, setContentJSX] = useState<JSX.Element | null>(null);\r\n    const rootNodeRef = useRef<any>(null);\r\n\r\n    useImperativeHandle(ref, () => rootNodeRef.current);\r\n\r\n    const htmlContent = article?.content;\r\n    useEffect(() => {\r\n      const parse = htmlToReactParserRef.current.parse;\r\n      setContentJSX(parse(htmlContent));\r\n    }, [htmlContent]);\r\n\r\n    const contentRender = () => {\r\n      return (\r\n        <div className=\"flex flex-col h-full overflow-y-hidden\">\r\n          <div className=\"flex items-center h-10 border-b mx-6\">\r\n            <IconButton\r\n              className=\"block lg:hidden\"\r\n              iconProps={backIcon}\r\n              onClick={closeModal}\r\n            />\r\n          </div>\r\n          <div className=\"article-wrapper overflow-y-scroll scrollbar flex-1 px-6\">\r\n            <article className=\"max-w-3xl w-full mx-auto py-4\">\r\n              <header className=\"mb-4\">\r\n                <h2 className=\"font-bold text-3xl break-words leading-10 mb-4\">\r\n                  <a href={article?.url} target=\"_blank\" rel=\"noreferrer\">\r\n                    {article?.title}\r\n                  </a>\r\n                </h2>\r\n                <div className=\"text-sm font-normal text-gray-400 flex align-middle\">\r\n                  <div className=\"mr-2\">{article?.sourceName}</div>\r\n                  <div className=\"mr-2\">Publish at {article?.publishedTime.format(\"YYYY-M-D H:m\")}</div>\r\n                </div>\r\n              </header>\r\n              <div>{contentJSX}</div>\r\n              <footer></footer>\r\n            </article>\r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div className={`${className}`} style={style} ref={rootNodeRef}>\r\n        {contentRender()}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default ArticlePane;\r\n","D:\\workspace\\project-personal\\fread\\src\\component\\feedsPane\\index.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\component\\overviewPane\\index.tsx",["127","128","129","130"],"import React from \"react\";\r\nimport {\r\n  GroupedList,\r\n  IGroupRenderProps,\r\n  IGroupHeaderProps,\r\n  CommandBarButton,\r\n  IIconProps,\r\n  FontIcon,\r\n  SelectionMode,\r\n  IContextualMenuProps,\r\n} from \"office-ui-fabric-react\";\r\nimport { createGroups } from \"@fluentui/example-data\";\r\nimport OverviewCell from \"./overviewCell\";\r\nimport \"./style.css\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useQuery, useQueryClient } from \"react-query\";\r\nimport { default as api } from \"../../api\";\r\nimport { default as get } from \"lodash.get\";\r\nimport { normalize, schema } from \"normalizr\";\r\nimport { IGroup } from \"@fluentui/react\";\r\nimport { produce } from \"immer\";\r\nimport queryString from \"query-string\";\r\nimport { SystemStreamIDs } from \"../../api/inoreader\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n}\r\n\r\nconst folder = new schema.Entity(\"folder\");\r\nconst subscription = new schema.Entity(\"subscription\", undefined, {\r\n  idAttribute: \"sortid\",\r\n});\r\n\r\nconst listItemClassName =\r\n  \"cursor-pointer items-center h-10 text-base flex hover:bg-gray-50 select-none\";\r\n\r\nconst moreIcon: IIconProps = { iconName: \"More\" };\r\n\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"renameFolder\",\r\n      text: \"rename\",\r\n      iconProps: { iconName: \"Edit\" },\r\n    },\r\n  ],\r\n};\r\n\r\nconst OverviewPane = ({ className }: Props) => {\r\n  const history = useHistory();\r\n  const commonPx = \"px-2\";\r\n  const queryClient = useQueryClient();\r\n\r\n  const setSubscriptionDataById = (streamId: string, updater: any): void =>\r\n    queryClient.setQueryData(\r\n      [\"home/subscriptionsListQuery\"],\r\n      produce((data) => {\r\n        const subscription = get(data, `entities.subscription['${streamId}']`);\r\n        updater(subscription);\r\n      })\r\n    );\r\n\r\n  const setFolderDataById = (folderId: string, updater: any): void =>\r\n    queryClient.setQueryData(\r\n      [\"home/folderQuery\"],\r\n      produce((data) => {\r\n        const folder = get(data, `entities.folder['${folderId}']`);\r\n        updater(folder);\r\n      })\r\n    );\r\n\r\n  const subscriptionsListQuery = useQuery(\r\n    \"home/subscriptionsListQuery\",\r\n    async () => {\r\n      const subscriptionList = await api.inoreader.getSubscriptionList();\r\n      const subscriptions = get(subscriptionList, \"data.subscriptions\");\r\n      const subscriptionsNormalized = normalize<any>(subscriptions, [\r\n        subscription,\r\n      ]);\r\n      return subscriptionsNormalized;\r\n    },\r\n    {\r\n      refetchOnWindowFocus: false,\r\n      placeholderData: {\r\n        entities: {},\r\n        result: [],\r\n      },\r\n    }\r\n  );\r\n\r\n  const folderQuery = useQuery(\r\n    \"home/folderQuery\",\r\n    async () => {\r\n      const res = await Promise.all([\r\n        api.inoreader.getFolderOrTagList(1, 1),\r\n        api.inoreader.getStreamPreferenceList(),\r\n      ]);\r\n      const tags = res[0].data.tags;\r\n      const folders = tags.filter((tag) => tag.type === \"folder\");\r\n      const foldersNormalized = normalize<any>(folders, [folder]);\r\n      const streamPreferences = res[1].data.streamprefs;\r\n      foldersNormalized.result.forEach((folderId) => {\r\n        const subscriptionOrdering = get(\r\n          streamPreferences,\r\n          `['${folderId}'][1].value`,\r\n          \"\"\r\n        );\r\n        const subscriptions = subscriptionOrdering.match(/.{1,8}/g);\r\n        const folder = get(foldersNormalized, `entities.folder['${folderId}']`);\r\n        folder.subscriptions = subscriptions;\r\n        folder.isCollapsed = false;\r\n      });\r\n      return foldersNormalized;\r\n    },\r\n    {\r\n      refetchOnWindowFocus: false,\r\n      placeholderData: {\r\n        entities: {},\r\n        result: [],\r\n      },\r\n    }\r\n  );\r\n\r\n  const onRenderCell = (\r\n    nestingDepth?: number,\r\n    item?: any,\r\n    itemIndex?: number\r\n  ): React.ReactNode => {\r\n    const onClick = (e: any) => {\r\n      history.push({\r\n        pathname: \"/feed\",\r\n        search: `streamId=${item.id}`,\r\n      });\r\n      if (typeof e.stopPropagation === \"function\") {\r\n        e.stopPropagation();\r\n      }\r\n    };\r\n    return item && typeof itemIndex === \"number\" && itemIndex > -1 ? (\r\n      <div\r\n        className={`${listItemClassName} hover:bg-gray-200 rounded-sm`}\r\n        style={{ paddingLeft: `${2 * (nestingDepth || 1)}rem` }}\r\n        onClick={onClick}\r\n      >\r\n        <img className=\"w-4 h-4 mr-2\" src={item.iconUrl} alt=\"\" />\r\n        <div className=\"truncate\">{item.title}</div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const groupProps: IGroupRenderProps = {\r\n    onRenderHeader: (props?: IGroupHeaderProps): JSX.Element | null => {\r\n      if (props && props.group) {\r\n        const toggleCollapse = (): void => {\r\n          setFolderDataById(props.group?.data.id, (folder) => {\r\n            folder.isCollapsed = !folder.isCollapsed;\r\n          });\r\n        };\r\n\r\n        return (\r\n          <div\r\n            className={`${listItemClassName} ${commonPx} hover:bg-gray-200 rounded-sm`}\r\n            onClick={toggleCollapse}\r\n          >\r\n            <FontIcon\r\n              className={`mr-2 transition-all transform ${\r\n                props.group!.isCollapsed ? \"\" : \"rotate-90\"\r\n              }`}\r\n              iconName=\"ChevronRight\"\r\n            />\r\n            <span className=\"flex-1\">\r\n              {props.group!.name} ({props.group?.data.unreadCount})\r\n            </span>\r\n            <CommandBarButton\r\n              className=\"bg-transparent hover:bg-transparent focus:bg-transparent focus:outline-none min-w-0\"\r\n              menuProps={menuProps}\r\n              iconProps={moreIcon}\r\n              onRenderMenuIcon={() => null}\r\n            />\r\n          </div>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n  };\r\n\r\n  const { groups, items }: { amount: number; groups: IGroup[]; items: any[] } =\r\n    folderQuery.data?.result.reduce(\r\n      ({ amount, groups, items }: any, folderId: string) => {\r\n        const foldEntity = get(\r\n          folderQuery,\r\n          `data.entities.folder['${folderId}']`\r\n        );\r\n        const idPartSplited: any[] = folderId.split(\"/\");\r\n        const name = idPartSplited[idPartSplited.length - 1];\r\n        const count = foldEntity.subscriptions.length;\r\n        items = items.concat(\r\n          foldEntity.subscriptions.map((subscriptionsId) =>\r\n            get(\r\n              subscriptionsListQuery,\r\n              `data.entities.subscription['${subscriptionsId}']`\r\n            )\r\n          )\r\n        );\r\n\r\n        groups.push({\r\n          key: foldEntity?.id,\r\n          name: name,\r\n          count: count,\r\n          startIndex: amount,\r\n          isCollapsed: foldEntity.isCollapsed,\r\n          data: {\r\n            unreadCount: foldEntity.unread_count,\r\n            id: foldEntity?.id,\r\n          },\r\n        });\r\n        return { amount: amount + count, groups, items };\r\n      },\r\n      { amount: 0, groups: [], items: [] }\r\n    );\r\n\r\n  return (\r\n    <div className={`${className} flex-1 flex flex-col min-h-0 cursor-pointer`}>\r\n      <OverviewCell\r\n        className={`${commonPx}`}\r\n        iconProps={{ iconName: \"PreviewLink\" }}\r\n        content=\"all\"\r\n        onClick={() => history.push(\"/feed\")}\r\n      />\r\n      <OverviewCell\r\n        className={`${commonPx}`}\r\n        iconProps={{ iconName: \"FavoriteStar\" }}\r\n        content=\"star\"\r\n        onClick={() =>\r\n          history.push({\r\n            pathname: \"/feed\",\r\n            search: queryString.stringify({\r\n              streamId: SystemStreamIDs.STARRED,\r\n              unreadOnly: \"0\",\r\n            }),\r\n          })\r\n        }\r\n      />\r\n      <OverviewCell\r\n        className={`${commonPx} bg-gray-50 rounded-t-lg rounded-b-none sm:bg-transparent sm:rounded-b-sm sm:rounded-t-sm`}\r\n        iconProps={{ iconName: \"Source\" }}\r\n        content=\"source\"\r\n        onFooterRender={() => (\r\n          <CommandBarButton\r\n            className=\"bg-transparent hover:bg-transparent focus:bg-transparent focus:outline-none min-w-0\"\r\n            menuProps={menuProps}\r\n            iconProps={moreIcon}\r\n            onRenderMenuIcon={() => null}\r\n          />\r\n        )}\r\n      />\r\n      <GroupedList\r\n        className=\"flex-1 border-b border-t overflow-y-auto scrollbar-none bg-gray-50 sm:bg-transparent\"\r\n        items={items || []}\r\n        onRenderCell={onRenderCell}\r\n        groupProps={groupProps}\r\n        selectionMode={SelectionMode.none}\r\n        groups={groups || []}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverviewPane;\r\n","D:\\workspace\\project-personal\\fread\\src\\component\\overviewPane\\overviewCell.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\component\\feedsPane\\feedItem.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\utils\\useInoreaderToken.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\api\\index.ts",[],"D:\\workspace\\project-personal\\fread\\src\\api\\auth.ts",[],"D:\\workspace\\project-personal\\fread\\src\\api\\inoreader.ts",[],"D:\\workspace\\project-personal\\fread\\src\\page\\oauth\\index.tsx",[],"D:\\workspace\\project-personal\\fread\\src\\page\\login\\index.tsx",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":10,"column":6,"nodeType":"137","endLine":10,"endColumn":8,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":11,"column":9,"nodeType":"141","messageId":"142","endLine":11,"endColumn":20},{"ruleId":"139","severity":1,"message":"143","line":13,"column":3,"nodeType":"141","messageId":"142","endLine":13,"endColumn":12},{"ruleId":"139","severity":1,"message":"144","line":195,"column":9,"nodeType":"141","messageId":"142","endLine":195,"endColumn":43},{"ruleId":"131","replacedBy":"145"},{"ruleId":"133","replacedBy":"146"},{"ruleId":"139","severity":1,"message":"147","line":11,"column":21,"nodeType":"141","messageId":"142","endLine":11,"endColumn":26},{"ruleId":"139","severity":1,"message":"148","line":12,"column":10,"nodeType":"141","messageId":"142","endLine":12,"endColumn":22},{"ruleId":"139","severity":1,"message":"149","line":15,"column":22,"nodeType":"141","messageId":"142","endLine":15,"endColumn":33},{"ruleId":"139","severity":1,"message":"150","line":15,"column":35,"nodeType":"141","messageId":"142","endLine":15,"endColumn":48},{"ruleId":"139","severity":1,"message":"151","line":54,"column":9,"nodeType":"141","messageId":"142","endLine":54,"endColumn":32},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toggle'. Either include it or remove the dependency array.","ArrayExpression",["154"],"@typescript-eslint/no-unused-vars","'emptyRender' is assigned a value but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'handleArticleItemInnerArticleClose' is assigned a value but never used.",["152"],["153"],"'dayjs' is defined but never used.","'createGroups' is defined but never used.","'useLocation' is defined but never used.","'useRouteMatch' is defined but never used.","'setSubscriptionDataById' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},"Update the dependencies array to be: [toggle]",{"range":"157","text":"158"},[239,241],"[toggle]"]