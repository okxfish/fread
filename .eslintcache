[{"D:\\workspace\\fread\\src\\index.tsx":"1","D:\\workspace\\fread\\src\\reportWebVitals.ts":"2","D:\\workspace\\fread\\src\\App.tsx":"3","D:\\workspace\\fread\\src\\page\\home\\index.tsx":"4","D:\\workspace\\fread\\src\\component\\overviewPane\\index.tsx":"5","D:\\workspace\\fread\\src\\component\\feedsPane\\index.tsx":"6","D:\\workspace\\fread\\src\\component\\articlePane\\index.tsx":"7","D:\\workspace\\fread\\src\\component\\feedsPane\\container.tsx":"8","D:\\workspace\\fread\\src\\component\\feedsPane\\component.tsx":"9","D:\\workspace\\fread\\src\\mock\\feed.ts":"10"},{"size":570,"mtime":1608625429880,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1608559821129,"results":"13","hashOfConfig":"12"},{"size":515,"mtime":1609937129156,"results":"14","hashOfConfig":"12"},{"size":3879,"mtime":1609955187680,"results":"15","hashOfConfig":"12"},{"size":4769,"mtime":1609937129163,"results":"16","hashOfConfig":"12"},{"size":77,"mtime":1608978858773,"results":"17","hashOfConfig":"12"},{"size":5179,"mtime":1609937129157,"results":"18","hashOfConfig":"12"},{"size":4437,"mtime":1609937129160,"results":"19","hashOfConfig":"12"},{"size":5167,"mtime":1609937129158,"results":"20","hashOfConfig":"12"},{"size":863,"mtime":1609937129164,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1gex1l0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\workspace\\fread\\src\\index.tsx",[],["46","47"],"D:\\workspace\\fread\\src\\reportWebVitals.ts",[],"D:\\workspace\\fread\\src\\App.tsx",[],"D:\\workspace\\fread\\src\\page\\home\\index.tsx",["48"],"D:\\workspace\\fread\\src\\component\\overviewPane\\index.tsx",["49"],"import React from \"react\";\r\nimport {\r\n  GroupedList,\r\n  IGroupRenderProps,\r\n  IGroupHeaderProps,\r\n} from \"office-ui-fabric-react/lib/GroupedList\";\r\nimport {\r\n  CommandBarButton,\r\n  IIconProps,\r\n  IContextualMenuProps,\r\n} from \"office-ui-fabric-react\";\r\nimport { FontIcon } from \"office-ui-fabric-react/lib/Icon\";\r\nimport { ICommandBarItemProps } from \"office-ui-fabric-react/lib/CommandBar\";\r\nimport { SelectionMode } from \"office-ui-fabric-react/lib/Selection\";\r\nimport { createGroups } from \"@fluentui/example-data\";\r\nimport \"./style.css\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n}\r\n\r\nconst groupCount = 3;\r\nconst groupDepth = 1;\r\nconst createItems = (count: number): any[] => {\r\n  return Array.from({\r\n    length: count,\r\n  }).map((item: any, index: number): any => ({\r\n    key: index,\r\n    unreadCount: 2,\r\n    title: `this is rss source: ${index}`,\r\n  }));\r\n};\r\n\r\nconst items: any[] = createItems(Math.pow(groupCount, groupDepth + 1));\r\nconst groups = createGroups(groupCount, groupDepth, 0, groupCount);\r\nconst listItemClassName =\r\n  \"cursor-pointer items-center h-10 text-base flex hover:bg-gray-200 select-none\";\r\n\r\nconst commandBarItems: ICommandBarItemProps[] = [\r\n  {\r\n    key: \"newItem\",\r\n    text: \"New\",\r\n    cacheKey: \"myCacheKey\", // changing this key will invalidate this item's cache\r\n    iconProps: { iconName: \"Add\" },\r\n    subMenuProps: {\r\n      items: [\r\n        {\r\n          key: \"emailMessage\",\r\n          text: \"Email message\",\r\n          iconProps: { iconName: \"Mail\" },\r\n          [\"data-automation-id\"]: \"newEmailButton\", // optional\r\n        },\r\n        {\r\n          key: \"calendarEvent\",\r\n          text: \"Calendar event\",\r\n          iconProps: { iconName: \"Calendar\" },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    key: \"upload\",\r\n    text: \"Upload\",\r\n    iconProps: { iconName: \"Upload\" },\r\n    href: \"https://developer.microsoft.com/en-us/fluentui\",\r\n  },\r\n  {\r\n    key: \"share\",\r\n    text: \"Share\",\r\n    iconProps: { iconName: \"Share\" },\r\n    onClick: () => console.log(\"Share\"),\r\n  },\r\n  {\r\n    key: \"download\",\r\n    text: \"Download\",\r\n    iconProps: { iconName: \"Download\" },\r\n    onClick: () => console.log(\"Download\"),\r\n  },\r\n];\r\n\r\nconst moreIcon: IIconProps = { iconName: \"More\" };\r\n\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"emailMessage\",\r\n      text: \"rename\",\r\n      iconProps: { iconName: \"Edit\" },\r\n    },\r\n    {\r\n      key: \"calendarEvent\",\r\n      text: \"Calendar event\",\r\n      iconProps: { iconName: \"Calendar\" },\r\n    },\r\n  ],\r\n};\r\n\r\nconst OverviewPane = ({ className }: Props) => {\r\n  const onRenderCell = (\r\n    nestingDepth?: number,\r\n    item?: any,\r\n    itemIndex?: number\r\n  ): React.ReactNode => {\r\n    return item && typeof itemIndex === \"number\" && itemIndex > -1 ? (\r\n      <div\r\n        className={`${listItemClassName}`}\r\n        style={{ paddingLeft: `${2 * (nestingDepth || 1)}rem` }}\r\n      >\r\n        <FontIcon className=\"mr-2\" iconName=\"Dictionary\" />\r\n        {item.title}\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const groupProps: IGroupRenderProps = {\r\n    onRenderHeader: (props?: IGroupHeaderProps): JSX.Element | null => {\r\n      if (props && props.group) {\r\n        const toggleCollapse = (): void => {\r\n          props.onToggleCollapse!(props.group!);\r\n        };\r\n\r\n        let unreadCount: number = 0;\r\n        const children = items.slice(\r\n          props.group.startIndex,\r\n          props.group.startIndex + props.group.count\r\n        );\r\n        children.forEach((item) => {\r\n          unreadCount += item.unreadCount;\r\n        });\r\n        return (\r\n          <div\r\n            className={`${listItemClassName} pl-2`}\r\n          >\r\n            <FontIcon\r\n              className={`mr-2 transition-all transform ${\r\n                props.group!.isCollapsed ? \"\" : \"rotate-90\"\r\n              }`}\r\n              iconName=\"ChevronRight\"\r\n              onClick={toggleCollapse}\r\n            />\r\n            <span className=\"flex-1\" onClick={toggleCollapse}>\r\n              {props.group!.name} ({unreadCount})\r\n            </span>\r\n            <CommandBarButton\r\n              className=\"mr-4 bg-transparent hover:bg-transparent active:bg-transparent focus:bg-transparent focus:outline-none\"\r\n              menuProps={menuProps}\r\n              iconProps={moreIcon}\r\n              onRenderMenuIcon={()=>null}\r\n            />\r\n          </div>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <GroupedList\r\n        className=\"flex-1\"\r\n        items={items}\r\n        onRenderCell={onRenderCell}\r\n        groupProps={groupProps}\r\n        selectionMode={SelectionMode.none}\r\n        groups={groups}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverviewPane;\r\n","D:\\workspace\\fread\\src\\component\\feedsPane\\index.tsx",[],"D:\\workspace\\fread\\src\\component\\articlePane\\index.tsx",[],"D:\\workspace\\fread\\src\\component\\feedsPane\\container.tsx",["50"],"import React, { useReducer } from \"react\";\r\nimport { default as FeedsPaneComponent } from \"./component\";\r\nimport {\r\n  FeedProps,\r\n  FeedGroup,\r\n  Feed,\r\n  DataInStore,\r\n  ObejectWithId,\r\n} from \"./types\";\r\nimport { IGroup } from \"office-ui-fabric-react\";\r\n\r\nimport feedsMockData from \"../../mock/feed\";\r\n\r\nfunction storeData<T extends ObejectWithId>(items: T[]): DataInStore<T> {\r\n  const result = items.reduce(\r\n    (previousValue: DataInStore<T>, currentValue: T): DataInStore<T> => {\r\n      previousValue[\"byId\"][currentValue.id] = currentValue;\r\n      previousValue[\"allId\"].push(currentValue.id);\r\n      return previousValue;\r\n    },\r\n    { byId: {}, allId: [] }\r\n  );\r\n  return result;\r\n}\r\n\r\nconst initStore = (): any => {\r\n  const staticState: any = { isSidePaneOpen: false };\r\n  const groupedfeedsEntities: FeedGroup[] = feedsMockData;\r\n\r\n  const groupsInStore: DataInStore<FeedGroup> = storeData<FeedGroup>(\r\n    groupedfeedsEntities.map(\r\n      (group: FeedGroup): FeedGroup => ({\r\n        ...group,\r\n        children: group.children.map((feed: Feed): string => feed.id),\r\n      })\r\n    )\r\n  );\r\n\r\n  const feedsArray: Feed[] = groupedfeedsEntities.reduce(\r\n    (previousValue: Feed[], currentValue: FeedGroup): Feed[] => {\r\n      return previousValue.concat(currentValue.children);\r\n    },\r\n    []\r\n  );\r\n\r\n  const feedsInStore: DataInStore<Feed> = storeData<Feed>(feedsArray);\r\n  return {\r\n    ...staticState,\r\n    groups: groupsInStore,\r\n    feeds: feedsInStore,\r\n  };\r\n};\r\n\r\nconst mapStoreToProps = (store): any => {\r\n  const { byId: groupsById, allId: groupsAllId } = store.groups;\r\n  const { byId: feedsById } = store.feeds;\r\n  const groupsEntities = groupsAllId.map((id: string) => groupsById[id]);\r\n  const [groups, feeds] = groupsEntities.reduce(\r\n    (\r\n      previousValue: [IGroup[], FeedProps[]],\r\n      currentValue: FeedGroup,\r\n      currentIndex: number\r\n    ): [IGroup[], FeedProps[]] => {\r\n      return [\r\n        reduceGroups(previousValue[0], currentValue, previousValue[1].length),\r\n        reduceFeeds(previousValue[1], currentValue.children, currentIndex),\r\n      ];\r\n    },\r\n    [[], []]\r\n  );\r\n  return { feeds, groups };\r\n\r\n  function reduceGroups(\r\n    previousValue: IGroup[],\r\n    currentValue: FeedGroup,\r\n    feedsLenght: number\r\n  ): IGroup[] {\r\n    const group = {\r\n      key: currentValue.id,\r\n      name: currentValue.name,\r\n      level: 0,\r\n      isCollapsed: false,\r\n      children: [],\r\n      count: currentValue.children.length,\r\n      startIndex: feedsLenght,\r\n    };\r\n    previousValue.push(group);\r\n    return previousValue;\r\n  }\r\n\r\n  function reduceFeeds(\r\n    previousValue: FeedProps[],\r\n    currentValue: string[],\r\n    currentIndex: number\r\n  ): FeedProps[] {\r\n    return previousValue.concat(\r\n      currentValue.map(\r\n        (feedId: string): FeedProps => {\r\n          const feedEntity = feedsById[feedId];\r\n          return {\r\n            ...feedEntity,\r\n            key: feedEntity.id,\r\n            currentIndex,\r\n          };\r\n        }\r\n      )\r\n    );\r\n  }\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const updateFeedById = (handleFeed): any => {\r\n    let result = { ...state };\r\n    result.feeds.byId[action.payload] = handleFeed(\r\n      result.feeds.byId[action.payload]\r\n    );\r\n    return result;\r\n  };\r\n\r\n  switch (action.type) {\r\n    case \"feed/ById/toggleIsRead\":\r\n      return updateFeedById((feed: Feed) => ({\r\n        ...feed,\r\n        isRead: !feed.isRead,\r\n      }));\r\n    case \"feed/ById/toggleIsStar\":\r\n      return updateFeedById((feed: Feed) => ({\r\n        ...feed,\r\n        isStar: !feed.isStar,\r\n      }));\r\n    case \"feed/ById/toggleIsPin\":\r\n      return updateFeedById((feed: Feed) => ({ ...feed, isPin: !feed.isPin }));\r\n    case \"sidePane/open\":\r\n      return { ...state, isSidePaneOpen: true };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst store = initStore();\r\n\r\nexport interface Props {\r\n  className?: string;\r\n  onClickFeed?(): any;\r\n}\r\n\r\nconst FeedsPaneContainer = ({ className, ...rest }: Props) => {\r\n  const [state, dispatch] = useReducer(reducer, store);\r\n  const {\r\n    feeds: itemsProps,\r\n    groups: groupProps,\r\n    isSidePaneOpen,\r\n  } = mapStoreToProps(state);\r\n  return (\r\n    <FeedsPaneComponent\r\n      className={className}\r\n      isSidePaneOpen={isSidePaneOpen}\r\n      items={itemsProps}\r\n      groups={groupProps}\r\n      dispatch={dispatch}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FeedsPaneContainer;\r\n","D:\\workspace\\fread\\src\\component\\feedsPane\\component.tsx",["51","52","53"],"import { default as React, Dispatch } from \"react\";\r\nimport {\r\n  Text,\r\n  Image,\r\n  ImageFit,\r\n  IconButton,\r\n  IIconProps,\r\n  Panel,\r\n  PanelType,\r\n  IContextualMenuProps,\r\n  FontIcon,\r\n  IGroup,\r\n  IImageProps,\r\n  GroupedList,\r\n  IGroupRenderProps,\r\n  IGroupHeaderProps,\r\n} from \"office-ui-fabric-react\";\r\nimport { FeedProps } from \"./types\";\r\nexport interface Props {\r\n  className?: string;\r\n  onClickFeed?(): any;\r\n  items: FeedProps[];\r\n  groups: IGroup[];\r\n  isSidePaneOpen: boolean;\r\n  dispatch: Dispatch<any>;\r\n}\r\n\r\nconst moreIcon: IIconProps = { iconName: \"More\" };\r\nconst favoriteStarIcon: IIconProps = { iconName: \"FavoriteStar\" };\r\nconst favoriteStarFillIcon: IIconProps = { iconName: \"FavoriteStarFill\" };\r\nconst pinSolid12Icon: IIconProps = { iconName: \"PinSolid12\" };\r\nconst pinSolidOff12Icon: IIconProps = { iconName: \"PinSolidOff12\" };\r\nconst readingModeIcon: IIconProps = { iconName: \"ReadingMode\" };\r\nconst readingModeSolidIcon: IIconProps = { iconName: \"ReadingModeSolid\" };\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"emailMessage\",\r\n      text: \"Email message\",\r\n      iconProps: { iconName: \"Mail\" },\r\n    },\r\n    {\r\n      key: \"calendarEvent\",\r\n      text: \"Calendar event\",\r\n      iconProps: { iconName: \"Calendar\" },\r\n    },\r\n  ],\r\n  directionalHintFixed: true,\r\n};\r\n\r\nconst FeedsPane = ({\r\n  className,\r\n  items,\r\n  groups,\r\n  onClickFeed,\r\n  isSidePaneOpen,\r\n  dispatch,\r\n}: Props) => {\r\n  const onRenderCell = (\r\n    nestingDepth?: number,\r\n    item?: FeedProps,\r\n    itemIndex?: number\r\n  ): React.ReactNode => {\r\n    const imageProps: IImageProps = {\r\n      src: item?.thumbnailSrc ,\r\n      width: 100,\r\n      height: 100,\r\n      imageFit: ImageFit.cover,\r\n    };\r\n    \r\n    const toggleIsReadById = (id: string, e:any): void => {\r\n      e.stopPropagation();\r\n      dispatch({ type: \"feed/ById/toggleIsRead\", payload: id });\r\n    }\r\n\r\n    const toggleIsStarById = (id: string, e:any): void => {\r\n      e.stopPropagation();\r\n      dispatch({ type: \"feed/ById/toggleIsStar\", payload: id });\r\n    }\r\n\r\n    const toggleIsPinById = (id: string, e:any): void => {\r\n      e.stopPropagation();\r\n      dispatch({ type: \"feed/ById/toggleIsPin\", payload: id });\r\n    }\r\n\r\n    return item && typeof itemIndex === \"number\" && itemIndex > -1 ? (\r\n      <div className=\"flex border-b border-gray-300 pt-4 pb-4 cursor-pointer group hover:bg-gray-200\" onClick={onClickFeed}>\r\n        <Image className=\"flex-shrink-0 mr-3\" {...imageProps} />\r\n        <div className=\"flex-1\">\r\n          <div className=\"relative flex items-start mb-2 text-lg text-gray-800 leading-none font-medium\">\r\n            <span className=\"flex-1\">{item.title}</span>\r\n          </div>\r\n          <div className=\"text-base text-gray-600\">{item.summary}</div>\r\n          <div className=\"flex items-center justify-end w-full\">\r\n            <div className=\"flex-1 text-sm text-gray-400\">\r\n              <span className=\"pr-1\">{item.sourceName}</span>\r\n              <span>/</span>\r\n              <span className=\"pl-1\">{item.time}</span>\r\n            </div>\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              iconProps={item.isPin ? pinSolid12Icon : pinSolidOff12Icon}\r\n              title=\"pin as unread\"\r\n              ariaLabel=\"Pin as unread\"\r\n              disabled={false}\r\n              onClick={toggleIsPinById.bind(null, item.key)}\r\n            />\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              iconProps={item.isStar ? favoriteStarFillIcon : favoriteStarIcon}\r\n              title=\"favorite\"\r\n              ariaLabel=\"Favorite\"\r\n              disabled={false}\r\n              onClick={toggleIsStarById.bind(null, item.key)}\r\n            />\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              iconProps={item.isRead ? readingModeSolidIcon : readingModeIcon}\r\n              title=\"mark as read\"\r\n              ariaLabel=\"Mark as read\"\r\n              disabled={false}\r\n              onClick={toggleIsReadById.bind(null, item.key)}\r\n            />\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              menuProps={menuProps}\r\n              iconProps={moreIcon}\r\n              onRenderMenuIcon={() => null}\r\n              title=\"more\"\r\n              ariaLabel=\"More\"\r\n              disabled={false}\r\n              checked={false}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const onRenderHeader = (props?: IGroupHeaderProps): JSX.Element | null => {\r\n    if (props && props.group) {\r\n      return (\r\n        <div className=\"cursor-pointer text-gray-600 text-lg font-bold leading-loose border-b border-gray-600\">\r\n          {props.group!.name}\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const groupProps: IGroupRenderProps = {\r\n    onRenderHeader: onRenderHeader,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GroupedList\r\n        className={`${className} px-6`}\r\n        items={items}\r\n        onRenderCell={onRenderCell}\r\n        groupProps={groupProps}\r\n        groups={groups}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedsPane;\r\n","D:\\workspace\\fread\\src\\mock\\feed.ts",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":7,"column":8,"nodeType":"60","messageId":"61","endLine":7,"endColumn":21},{"ruleId":"62","severity":1,"message":"63","line":55,"column":11,"nodeType":"64","messageId":"65","endLine":55,"endColumn":51,"fix":"66"},{"ruleId":"58","severity":1,"message":"67","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"68","line":3,"column":3,"nodeType":"60","messageId":"61","endLine":3,"endColumn":7},{"ruleId":"58","severity":1,"message":"69","line":9,"column":3,"nodeType":"60","messageId":"61","endLine":9,"endColumn":11},{"ruleId":"58","severity":1,"message":"70","line":72,"column":11,"nodeType":"60","messageId":"61","endLine":72,"endColumn":32},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"@typescript-eslint/no-unused-vars","'feedsMockData' is defined but never used.","Identifier","unusedVar","no-useless-computed-key","Unnecessarily computed property [\"data-automation-id\"] found.","Property","unnecessarilyComputedProperty",{"range":"73","text":"74"},"'useState' is defined but never used.","'Text' is defined but never used.","'FontIcon' is defined but never used.","'handleMarkAsReadClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[1607,1629],"\"data-automation-id\""]