[{"D:\\workspace\\fread\\src\\index.tsx":"1","D:\\workspace\\fread\\src\\App.tsx":"2","D:\\workspace\\fread\\src\\context\\setting.ts":"3","D:\\workspace\\fread\\src\\context\\viewType.ts":"4","D:\\workspace\\fread\\src\\utils\\useInoreaderToken.tsx":"5","D:\\workspace\\fread\\src\\page\\oauth\\index.tsx":"6","D:\\workspace\\fread\\src\\component\\bookFilp\\index.tsx":"7","D:\\workspace\\fread\\src\\page\\login\\index.tsx":"8","D:\\workspace\\fread\\src\\page\\home\\index.tsx":"9","D:\\workspace\\fread\\src\\utils\\useSearchParma.tsx":"10","D:\\workspace\\fread\\src\\api\\index.ts":"11","D:\\workspace\\fread\\src\\page\\home\\sideBar.tsx":"12","D:\\workspace\\fread\\src\\component\\halfScreenPanel\\halfScreenPanel.tsx":"13","D:\\workspace\\fread\\src\\page\\feed\\overviewPane.tsx":"14","D:\\workspace\\fread\\src\\api\\inoreader.ts":"15","D:\\workspace\\fread\\src\\api\\auth.ts":"16","D:\\workspace\\fread\\src\\page\\feed\\index.tsx":"17","D:\\workspace\\fread\\src\\page\\home\\sideBarButton.tsx":"18","D:\\workspace\\fread\\src\\page\\feed\\overviewCell.tsx":"19","D:\\workspace\\fread\\src\\page\\feed\\feed.tsx":"20","D:\\workspace\\fread\\src\\context\\feed.ts":"21","D:\\workspace\\fread\\src\\page\\feed\\utils.ts":"22","D:\\workspace\\fread\\src\\context\\article.ts":"23","D:\\workspace\\fread\\src\\page\\feed\\articlePane.tsx":"24","D:\\workspace\\fread\\src\\page\\feed\\feedsPane.tsx":"25","D:\\workspace\\fread\\src\\page\\feed\\feedItem.tsx":"26","D:\\workspace\\fread\\src\\page\\feed\\subscriptionInfoCard.tsx":"27","D:\\workspace\\fread\\src\\page\\feed\\feedShimmer.tsx":"28","D:\\workspace\\fread\\src\\context\\userInfo.ts":"29","D:\\workspace\\fread\\src\\page\\home\\AddFeed.tsx":"30","D:\\workspace\\fread\\src\\api\\mockData.ts":"31","D:\\workspace\\fread\\src\\page\\home\\viewSettingPane.tsx":"32"},{"size":978,"mtime":1622043874284,"results":"33","hashOfConfig":"34"},{"size":3130,"mtime":1623239597847,"results":"35","hashOfConfig":"34"},{"size":959,"mtime":1623078026793,"results":"36","hashOfConfig":"34"},{"size":205,"mtime":1622204080387,"results":"37","hashOfConfig":"34"},{"size":752,"mtime":1621046572974,"results":"38","hashOfConfig":"34"},{"size":607,"mtime":1621092202191,"results":"39","hashOfConfig":"34"},{"size":805,"mtime":1612179586603,"results":"40","hashOfConfig":"34"},{"size":2515,"mtime":1623239597969,"results":"41","hashOfConfig":"34"},{"size":2455,"mtime":1623333291042,"results":"42","hashOfConfig":"34"},{"size":1027,"mtime":1610625825207,"results":"43","hashOfConfig":"34"},{"size":1719,"mtime":1623320109489,"results":"44","hashOfConfig":"34"},{"size":6373,"mtime":1623330653399,"results":"45","hashOfConfig":"34"},{"size":973,"mtime":1623239597848,"results":"46","hashOfConfig":"34"},{"size":8984,"mtime":1623327663819,"results":"47","hashOfConfig":"34"},{"size":4930,"mtime":1623246840654,"results":"48","hashOfConfig":"34"},{"size":391,"mtime":1621089632015,"results":"49","hashOfConfig":"34"},{"size":58,"mtime":1622203042157,"results":"50","hashOfConfig":"34"},{"size":1070,"mtime":1623330195074,"results":"51","hashOfConfig":"34"},{"size":1200,"mtime":1622353913575,"results":"52","hashOfConfig":"34"},{"size":5414,"mtime":1623328240261,"results":"53","hashOfConfig":"34"},{"size":87,"mtime":1612080267585,"results":"54","hashOfConfig":"34"},{"size":400,"mtime":1621610769969,"results":"55","hashOfConfig":"34"},{"size":149,"mtime":1622254599289,"results":"56","hashOfConfig":"34"},{"size":3414,"mtime":1622632896668,"results":"57","hashOfConfig":"34"},{"size":9626,"mtime":1623314163428,"results":"58","hashOfConfig":"34"},{"size":5095,"mtime":1623239597952,"results":"59","hashOfConfig":"34"},{"size":1516,"mtime":1623239597961,"results":"60","hashOfConfig":"34"},{"size":1727,"mtime":1623239597954,"results":"61","hashOfConfig":"34"},{"size":94,"mtime":1623078026794,"results":"62","hashOfConfig":"34"},{"size":1780,"mtime":1623085039947,"results":"63","hashOfConfig":"34"},{"size":6418,"mtime":1623320109490,"results":"64","hashOfConfig":"34"},{"size":3337,"mtime":1623332972782,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"59lj7j",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\workspace\\fread\\src\\index.tsx",[],["136","137"],"D:\\workspace\\fread\\src\\App.tsx",[],"D:\\workspace\\fread\\src\\context\\setting.ts",[],"D:\\workspace\\fread\\src\\context\\viewType.ts",[],"D:\\workspace\\fread\\src\\utils\\useInoreaderToken.tsx",[],"D:\\workspace\\fread\\src\\page\\oauth\\index.tsx",[],"D:\\workspace\\fread\\src\\component\\bookFilp\\index.tsx",["138"],"import React, { useEffect } from \"react\";\r\nimport { useInterval, useToggle } from \"react-use\";\r\nimport \"./style.css\";\r\n\r\nconst BookFilp = () => {\r\n  const [isFilpEnd, toggle] = useToggle(false);\r\n\r\n  useEffect(() => {\r\n    toggle();\r\n  }, []);\r\n\r\n  useInterval(() => {\r\n    toggle();\r\n  }, 167 * 7);\r\n\r\n  return (\r\n    <div className={`book ${isFilpEnd ? \"filp-end\" : \"\"}`}>\r\n      <div className=\"back bg-gray-500\"></div>\r\n      <div className=\"book-page page6\"></div>\r\n      <div className=\"book-page page5\"></div>\r\n      <div className=\"book-page page4\"></div>\r\n      <div className=\"book-page page3\"></div>\r\n      <div className=\"book-page page2\"></div>\r\n      <div className=\"book-page page1\"></div>\r\n      <div className=\"front bg-gray-500\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookFilp;\r\n","D:\\workspace\\fread\\src\\page\\login\\index.tsx",[],"D:\\workspace\\fread\\src\\page\\home\\index.tsx",[],"D:\\workspace\\fread\\src\\utils\\useSearchParma.tsx",[],"D:\\workspace\\fread\\src\\api\\index.ts",[],"D:\\workspace\\fread\\src\\page\\home\\sideBar.tsx",[],"D:\\workspace\\fread\\src\\component\\halfScreenPanel\\halfScreenPanel.tsx",[],"D:\\workspace\\fread\\src\\page\\feed\\overviewPane.tsx",["139","140","141"],"import React, { ReactElement, useContext } from \"react\";\r\nimport {\r\n  Stack,\r\n  Text,\r\n  INavLink,\r\n  Nav,\r\n  IRenderFunction,\r\n  Icon,\r\n} from \"@fluentui/react\";\r\nimport OverviewCell from \"./overviewCell\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { useQuery, useQueryClient } from \"react-query\";\r\nimport { default as api } from \"../../api\";\r\nimport { default as get } from \"lodash.get\";\r\nimport { normalize, schema, NormalizedSchema } from \"normalizr\";\r\nimport { produce } from \"immer\";\r\nimport queryString from \"query-string\";\r\nimport { IdValuePair, SystemStreamIDs } from \"../../api/inoreader\";\r\nimport { SettingContext } from \"./../../context/setting\";\r\nimport { StreamPreferenceListResponse } from \"./../../api/inoreader\";\r\nimport { UserInfoContext } from \"./../../context/userInfo\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n}\r\n\r\nexport interface Sortable {\r\n  sortid: string;\r\n}\r\nexport interface Subscription extends Sortable {\r\n  id: string;\r\n  title: string;\r\n  iconUrl?: string;\r\n}\r\n\r\nexport interface InoreaderTag extends Sortable {\r\n  id: string;\r\n  type?: \"tag\" | \"folder\" | \"active_search\";\r\n  unread_count?: number;\r\n  unseen_count?: number;\r\n}\r\n\r\nexport interface SubscriptionEntity {\r\n  subscription: { [key: string]: Subscription };\r\n}\r\n\r\nexport interface Folder extends InoreaderTag {\r\n  isCollapsed?: boolean;\r\n}\r\n\r\nexport interface FolderEntity {\r\n  folder: { [key: string]: Folder };\r\n}\r\n\r\nconst subscription = new schema.Entity(\"subscription\", undefined);\r\nconst folder = new schema.Entity(\"folder\");\r\n\r\nconst OverviewPane = ({ className }: Props) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const commonPx = \"px-2\";\r\n  const queryClient = useQueryClient();\r\n  const { setting, setSetting } = useContext(SettingContext);\r\n  const userInfo = useContext(UserInfoContext);\r\n\r\n  const setSubscriptionDataById = (streamId: string, updater: any): void =>\r\n    queryClient.setQueryData(\r\n      [\"home/subscriptionsListQuery\"],\r\n      produce((data) => {\r\n        const subscription = get(data, `entities.subscription['${streamId}']`);\r\n        updater(subscription);\r\n      })\r\n    );\r\n\r\n  const setFolderDataById = (folderId: string, updater: any): void =>\r\n    queryClient.setQueryData(\r\n      [\"home/folderQuery\"],\r\n      produce((data) => {\r\n        const folder = get(data, `entities.folder['${folderId}']`);\r\n        updater(folder);\r\n      })\r\n    );\r\n\r\n  const subscriptionsListQuery = useQuery<\r\n    NormalizedSchema<SubscriptionEntity, string[]>\r\n  >(\r\n    \"home/subscriptionsListQuery\",\r\n    async () => {\r\n      console.info('fetching subscriptionList')\r\n      const subscriptionList = await api.inoreader.getSubscriptionList();\r\n      const subscriptions = get(subscriptionList, \"data.subscriptions\");\r\n      const subscriptionsNormalized = normalize<\r\n        Subscription,\r\n        SubscriptionEntity\r\n      >(subscriptions, [subscription]);\r\n      return subscriptionsNormalized;\r\n    },\r\n    {\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n\r\n  const streamPreferencesQuery = useQuery<StreamPreferenceListResponse>(\r\n    [\"streamPreferences\"],\r\n    async () => {\r\n      const res = await api.inoreader.getStreamPreferenceList();\r\n      return res.data;\r\n    },\r\n    {\r\n      refetchOnWindowFocus: false,\r\n      retry: false,\r\n    }\r\n  );\r\n\r\n  const folderQuery = useQuery<NormalizedSchema<FolderEntity, string[]>>(\r\n    [\"home/folderQuery\"],\r\n    async () => {\r\n      const res = await api.inoreader.getFolderOrTagList(1, 1);\r\n      const tags = res.data.tags;\r\n      console.log(tags);\r\n      const foldersNormalized = normalize<InoreaderTag, FolderEntity>(tags, [\r\n        folder,\r\n      ]);\r\n      return foldersNormalized;\r\n    },\r\n    {\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n\r\n  const onRenderLink: IRenderFunction<INavLink> = (props, defaultRender) => {\r\n    if (!props) {\r\n      return null;\r\n    }\r\n\r\n    const iconRender = (): ReactElement | null => {\r\n      if (props.type === \"feed\") {\r\n        if (setting.subscription.isIconDisplay && props.iconUrl) {\r\n          return <img className=\"w-4 h-4 mr-2\" src={props.iconUrl} alt=\"\" />;\r\n        } else {\r\n          return null;\r\n        }\r\n      } else {\r\n        return (\r\n          <Icon\r\n            iconName={props.type === \"tag\" ? \"Tag\" : \"FolderHorizontal\"}\r\n            className=\"mr-2\"\r\n          />\r\n        );\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Stack horizontal verticalAlign=\"center\" className=\"w-full\">\r\n        {iconRender()}\r\n        <Text block nowrap className=\"flex-1 text-left font-medium\">\r\n          {props.name}\r\n        </Text>\r\n        {props.type !== \"feed\" ? <span>{props.unreadCount}</span> : null}\r\n      </Stack>\r\n    );\r\n  };\r\n\r\n  if (\r\n    !subscriptionsListQuery.data ||\r\n    !folderQuery.data ||\r\n    !streamPreferencesQuery.data\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const createIdTableIndexedBySortid = (tagsById: {\r\n    [id: string]: Sortable;\r\n  }): { [sortId: string]: string } => {\r\n    let result = {};\r\n    for (const id in tagsById) {\r\n      if (Object.prototype.hasOwnProperty.call(tagsById, id)) {\r\n        const tag = tagsById[id];\r\n        result[tag.sortid] = id;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const getIdBySortid = (sortid: string): string => {\r\n    const subscriptionIdTableIndexBySortid = createIdTableIndexedBySortid(\r\n      subscriptionsListQuery.data.entities.subscription\r\n    );\r\n\r\n    const tagIdTableIndexBySortid = createIdTableIndexedBySortid(\r\n      folderQuery.data.entities.folder\r\n    );\r\n\r\n    const sortidToIdMap = {\r\n      ...subscriptionIdTableIndexBySortid,\r\n      ...tagIdTableIndexBySortid,\r\n    };\r\n    return sortidToIdMap[sortid];\r\n  };\r\n\r\n  const isFeedId = (id: string): boolean => {\r\n    return !!id && id.startsWith(\"feed/\");\r\n  };\r\n\r\n  const getFolderById = (id: string): Folder =>\r\n    folderQuery.data.entities.folder[id];\r\n\r\n  const getSubscriptionById = (id: string): Subscription =>\r\n    subscriptionsListQuery.data.entities.subscription[id];\r\n\r\n  const getStreamPrefById = (id: string): IdValuePair[] => {\r\n    return streamPreferencesQuery.data.streamprefs[id];\r\n  };\r\n\r\n  const getSortIdString = (streamPref: IdValuePair[]): string => {\r\n    return streamPref[streamPref.length - 1]?.value;\r\n  };\r\n\r\n  const chunck = (str: string): string[] => {\r\n    return str.match(/.{1,8}/g) || [];\r\n  };\r\n\r\n  const getTagName = (folderId: string): string => {\r\n    const slice: string[] = folderId.split(\"/\");\r\n    return slice[slice.length - 1];\r\n  };\r\n\r\n  const getNavLinks = (id: string): any => {\r\n    const url = `/feed?streamId=${id}`;\r\n    if (isFeedId(id)) {\r\n      const subscription = getSubscriptionById(id);\r\n      return {\r\n        name: subscription.title,\r\n        key: id,\r\n        url: url,\r\n        type: \"feed\",\r\n        iconUrl: subscription.iconUrl,\r\n      };\r\n    } else {\r\n      const tag = getFolderById(id);\r\n      if (tag && tag.type === \"tag\") {\r\n        return {\r\n          name: getTagName(id),\r\n          key: id,\r\n          url: url,\r\n          type: \"tag\",\r\n          unreadCount: tag.unread_count,\r\n        };\r\n      } else {\r\n        const streamPref = getStreamPrefById(id);\r\n        const sortIdString = getSortIdString(streamPref);\r\n        const childrenSortIds = chunck(sortIdString);\r\n        const links = childrenSortIds.map(getIdBySortid).map(getNavLinks);\r\n        const name = getTagName(id);\r\n        return {\r\n          name: name === \"root\" ? \"Feed\" : name,\r\n          links: links,\r\n          key: id,\r\n          url: url,\r\n          type: \"folder\",\r\n          unreadCount: tag?.unread_count,\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLinkClick = (\r\n    e?: React.MouseEvent<HTMLElement>,\r\n    item?: INavLink\r\n  ) => {\r\n    e?.preventDefault();\r\n    const qs = queryString.parse(location.search);\r\n    history.push({\r\n      pathname: \"/feed\",\r\n      search: queryString.stringify({ ...qs, streamId: item?.key }),\r\n    });\r\n  };\r\n\r\n  const groups = userInfo\r\n    ? [getNavLinks(`user/${userInfo.userId}/state/com.google/root`)]\r\n    : [];\r\n\r\n  return (\r\n    <Stack className={`${className} min-h-0`}>\r\n      <OverviewCell\r\n        className={commonPx}\r\n        iconProps={{ iconName: \"PreviewLink\" }}\r\n        text=\"all\"\r\n        onClick={() => history.push(\"/feed\")}\r\n      />\r\n      <OverviewCell\r\n        className={commonPx}\r\n        iconProps={{ iconName: \"FavoriteStar\" }}\r\n        text=\"star\"\r\n        onClick={() =>\r\n          history.push({\r\n            pathname: \"/feed\",\r\n            search: queryString.stringify({\r\n              streamId: SystemStreamIDs.STARRED,\r\n              unreadOnly: \"0\",\r\n            }),\r\n          })\r\n        }\r\n      />\r\n      <Nav\r\n        styles={{ chevronButton: \"bg-transparent\", link: 'pl-8 pr-6' }}\r\n        groups={groups}\r\n        onRenderLink={onRenderLink}\r\n        onLinkClick={handleLinkClick}\r\n        onRenderGroupHeader={(()=>null)}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default OverviewPane;\r\n","D:\\workspace\\fread\\src\\api\\inoreader.ts",[],"D:\\workspace\\fread\\src\\api\\auth.ts",[],"D:\\workspace\\fread\\src\\page\\feed\\index.tsx",[],"D:\\workspace\\fread\\src\\page\\home\\sideBarButton.tsx",[],"D:\\workspace\\fread\\src\\page\\feed\\overviewCell.tsx",[],"D:\\workspace\\fread\\src\\page\\feed\\feed.tsx",["142"],"import React, { useMemo, useState, useContext } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { ArticleContext } from \"../../context/article\";\r\nimport { FeedContext } from \"../../context/feed\";\r\nimport { ViewType, ViewTypeContext } from \"../../context/viewType\";\r\n\r\nimport { FeedItem, FeedProps } from \"./types\";\r\n\r\nimport { filterImgSrcfromHtmlStr } from \"./utils\";\r\nimport { default as api } from \"../../api\";\r\nimport { StreamContentsResponse, SystemStreamIDs } from \"../../api/inoreader\";\r\n\r\nimport { get } from \"lodash\";\r\nimport { normalize, NormalizedSchema, schema } from \"normalizr\";\r\nimport { Dayjs, default as dayjs } from \"dayjs\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { Modal } from \"@fluentui/react\";\r\n\r\nimport ArticlePane from \"./articlePane\";\r\nimport FeedsPane from \"./feedsPane\";\r\nimport OverviewPane from \"./overviewPane\";\r\nimport \"./style.css\";\r\nimport { NeutralColors } from \"@fluentui/theme\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\n\r\nconst article = new schema.Entity<FeedProps>(\"article\");\r\n\r\nexport interface Props {\r\n  isOverViewPaneOpen: boolean;\r\n}\r\n\r\nexport interface ArticleEntity {\r\n  article: { [key: string]: FeedProps };\r\n}\r\n\r\nconst FeedContainer = ({ isOverViewPaneOpen }) => {\r\n  const [currenActivedFeedId, setCurrenActivedFeedId] = useState<string>(\"\");\r\n  const [currenActivedFeedIndex, setCurrenActivedFeedIndex] =\r\n    useState<number>(-1);\r\n  const [isArticleModalOpen, setIsArticleModalOpen] = useState<boolean>(false);\r\n  const { viewType } = useContext(ViewTypeContext);\r\n  const location = useLocation();\r\n  const qs = queryString.parse(location.search);\r\n  const streamId = qs.streamId;\r\n  const unreadOnly = qs.unreadOnly;\r\n\r\n  const streamContentQueryKey = useMemo(\r\n    () => [\"feed/streamContentQuery\", streamId, unreadOnly],\r\n    [streamId, unreadOnly]\r\n  );\r\n\r\n  const resolveStreamContent = (data: StreamContentsResponse) => {\r\n    const transformedData: FeedItem[] = data.items.map((item, index) => {\r\n      const publishedTime: Dayjs = dayjs.unix(item.published);\r\n      const thumbnailSrc = filterImgSrcfromHtmlStr(item.summary.content);\r\n      return {\r\n        id: item.id,\r\n        title: item.title,\r\n        summary: \"\",\r\n        thumbnailSrc: thumbnailSrc,\r\n        content: item.summary.content,\r\n        sourceName: item.origin.title,\r\n        sourceID: item.origin.streamId,\r\n        url: item.canonical[0].href,\r\n        publishedTime: publishedTime,\r\n        isRead: false,\r\n        isStar: false,\r\n        isInnerArticleShow: false,\r\n      };\r\n    });\r\n    const normalizeData = normalize<FeedProps, ArticleEntity, string[]>(\r\n      transformedData,\r\n      [article]\r\n    );\r\n    return normalizeData;\r\n  };\r\n\r\n  // 从服务器获取 feed 流，并且将响应数据转换成组件的状态，将数据范式化\r\n  const streamContentQuery = useQuery<\r\n    NormalizedSchema<ArticleEntity, string[]>\r\n  >(\r\n    streamContentQueryKey,\r\n    async ({ queryKey: [key, streamId='', unreadOnly='0'] }) => {\r\n      console.info(streamContentQueryKey, 'is fetching')\r\n      const exclude = unreadOnly ? SystemStreamIDs.READ : \"\";\r\n      const { data } = await api.inoreader.getStreamContents(String(streamId), {\r\n        exclude: exclude,\r\n      });\r\n      return resolveStreamContent(data);\r\n    },\r\n    {\r\n      placeholderData: { entities: { article: {} }, result: [] },\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n\r\n  const activedArticle: FeedItem | null = get(\r\n    streamContentQuery.data,\r\n    `entities.article['${currenActivedFeedId}']`,\r\n    null\r\n  );\r\n\r\n  return (\r\n    <FeedContext.Provider value={{ streamContentQuery, streamContentQueryKey }}>\r\n      <ArticleContext.Provider value={activedArticle}>\r\n        <div\r\n          className=\"hidden sm:block border-r overflow-y-scroll scrollbar-none transition-all w-72\"\r\n          style={{ backgroundColor: NeutralColors.gray10 }}\r\n        >\r\n          <OverviewPane />\r\n        </div>\r\n        <div\r\n          className={classnames(\r\n            \"overflow-scroll scrollbar h-full bg-gray-100 w-128 transition-all\",\r\n            {\r\n              \"flex-1\": viewType !== ViewType.threeway,\r\n            }\r\n          )}\r\n          data-is-scrollable\r\n        >\r\n          <FeedsPane\r\n            className={classnames(\" bg-white\", {\r\n              \"max-w-3xl mx-auto\": viewType !== ViewType.list,\r\n            })}\r\n            currenActivedFeedId={currenActivedFeedId}\r\n            setCurrenActivedFeedId={setCurrenActivedFeedId}\r\n            setCurrenActivedFeedIndex={setCurrenActivedFeedIndex}\r\n            setIsArticleModalOpen={setIsArticleModalOpen}\r\n          />\r\n        </div>\r\n        {viewType === ViewType.threeway && (\r\n          <div className=\"flex-1\" style={{minWidth: '32rem'}}>\r\n            <ArticlePane className=\"h-full\" />\r\n          </div>\r\n        )}\r\n        <Modal\r\n          className=\"\"\r\n          isOpen={isArticleModalOpen}\r\n          onDismiss={() => setIsArticleModalOpen(false)}\r\n          isBlocking={false}\r\n          styles={{\r\n            main: [{ maxHeight: \"100%\" }],\r\n          }}\r\n        >\r\n          <ArticlePane\r\n            className=\"article-modal h-screen w-screen\"\r\n            closeModal={() => setIsArticleModalOpen(false)}\r\n          />\r\n        </Modal>\r\n      </ArticleContext.Provider>\r\n    </FeedContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FeedContainer;\r\n","D:\\workspace\\fread\\src\\context\\feed.ts",[],"D:\\workspace\\fread\\src\\page\\feed\\utils.ts",[],"D:\\workspace\\fread\\src\\context\\article.ts",[],"D:\\workspace\\fread\\src\\page\\feed\\articlePane.tsx",[],"D:\\workspace\\fread\\src\\page\\feed\\feedsPane.tsx",[],"D:\\workspace\\fread\\src\\page\\feed\\feedItem.tsx",["143"],"import React, { useContext } from \"react\";\r\nimport {\r\n  Text,\r\n  IconButton,\r\n  ImageFit,\r\n  IIconProps,\r\n  Image,\r\n  Stack,\r\n  IButtonProps,\r\n} from \"@fluentui/react\";\r\nimport classnames from \"classnames\";\r\nimport { FeedProps } from \"./types\";\r\nimport ArticlePane from \"./articlePane\";\r\nimport { ViewType, ViewTypeContext } from \"../../context/viewType\";\r\nimport { default as dayjs, Dayjs } from \"dayjs\";\r\nimport {\r\n  FeedThumbnailDisplayType,\r\n  SettingContext,\r\n} from \"../../context/setting\";\r\n\r\nexport interface Props extends FeedProps {\r\n  itemIndex: number;\r\n  isSelected: boolean;\r\n}\r\n\r\nconst favoriteStarIcon: IIconProps = { iconName: \"FavoriteStar\" };\r\nconst favoriteStarFillIcon: IIconProps = { iconName: \"FavoriteStarFill\" };\r\nconst radioBtnOffIcon: IIconProps = { iconName: \"RadioBtnOff\" };\r\nconst radioBtnOnIcon: IIconProps = { iconName: \"RadioBtnOn\" };\r\n\r\nconst FeedItem = ({\r\n  data,\r\n  itemIndex,\r\n  isSelected,\r\n  className,\r\n  onClick = () => {},\r\n  onRead = () => {},\r\n  onStar = () => {},\r\n}: Props) => {\r\n  const { viewType } = useContext(ViewTypeContext);\r\n  const { setting } = useContext(SettingContext);\r\n\r\n  const feedHeaderRender = (): React.ReactElement | null => {\r\n    if (viewType === ViewType.list) {\r\n      return null;\r\n    }\r\n\r\n    const thumbnaillElem: React.ReactElement = (\r\n      <div\r\n        className={`flex-shrink-0 h-24 w-24  mr-4 mb-0 rounded-md overflow-hidden bg-gray-300 ${\r\n          data.isRead ? \"opacity-40\" : \"\"\r\n        }`}\r\n      >\r\n        <Image\r\n          className=\"mr-3  select-none\"\r\n          src={data.thumbnailSrc}\r\n          maximizeFrame={true}\r\n          imageFit={ImageFit.cover}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    switch (setting.feed.feedThumbnailDisplayType) {\r\n      case FeedThumbnailDisplayType.alwaysDisplay:\r\n        return thumbnaillElem;\r\n      case FeedThumbnailDisplayType.displayWhenThumbnaillExist:\r\n        return data.thumbnailSrc ? thumbnaillElem : null;\r\n      case FeedThumbnailDisplayType.alwaysNotDisplay:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const nowTime: Dayjs = dayjs();\r\n  const relativePublishedTime: string = data.publishedTime.from(nowTime);\r\n  const feedBodyElem: React.ReactElement | null = (\r\n    <Stack\r\n      horizontal={viewType === ViewType.list}\r\n      verticalAlign={viewType === ViewType.list ? \"center\" : \"stretch\"}\r\n      className={classnames(\"flex-1 overflow-hidden\", {\r\n        \"opacity-40\": data.isRead,\r\n      })}\r\n    >\r\n      <Text\r\n        className={classnames(\"text-base\", {\r\n          \"mr-2\": viewType === ViewType.list,\r\n          \"mb-2\": viewType !== ViewType.list,\r\n        })}\r\n      >\r\n        {data.title}\r\n      </Text>\r\n      <Text className=\"flex-1 text-base w-full\">{data.summary}</Text>\r\n      <Stack\r\n        horizontal\r\n        verticalAlign=\"center\"\r\n        className=\"text-sm text-gray-400\"\r\n      >\r\n        <Text className=\"flex-1\" block nowrap title={data.sourceName}>\r\n          {data.sourceName}\r\n        </Text>\r\n        <Text className=\"flex-0\" nowrap>\r\n          {relativePublishedTime}\r\n        </Text>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n\r\n  const feedFooterElem: React.ReactElement = (\r\n    <Stack\r\n      horizontal={viewType === ViewType.list}\r\n      verticalAlign={viewType === ViewType.list ? \"center\" : \"start\"}\r\n      className=\"hidden sm:flex\"\r\n    >\r\n      <IconButton\r\n        className=\"focus:outline-none\"\r\n        iconProps={data.isRead ? radioBtnOffIcon : radioBtnOnIcon}\r\n        title=\"mark as read\"\r\n        ariaLabel=\"Mark as read\"\r\n        disabled={false}\r\n        onClick={(e) => onRead(data, itemIndex, e)}\r\n        {...data.unreadMarkButtonProps}\r\n      />\r\n      <IconButton\r\n        className={classnames(\"focus:outline-none\", {\r\n          \"text-yellow-300 hover:text-yellow-300\": data.isStar,\r\n        })}\r\n        iconProps={data.isStar ? favoriteStarFillIcon : favoriteStarIcon}\r\n        title=\"favorite\"\r\n        ariaLabel=\"Favorite\"\r\n        disabled={false}\r\n        onClick={(e) => onStar(data, itemIndex, e)}\r\n        {...data.starButtonProps}\r\n      />\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <div className={`overflow-x-hidden relative ${className}`}>\r\n      <Stack\r\n        horizontal\r\n        onClick={(e) => onClick(data, itemIndex, e)}\r\n        className={classnames(\r\n          \"relative z-10 p-4 group cursor-pointer select-none hover:bg-blue-50\",\r\n          {\r\n            \"py-1 border-b\": viewType === ViewType.list,\r\n            \"bg-blue-100\": isSelected,\r\n          }\r\n        )}\r\n      >\r\n        {feedHeaderRender()}\r\n        {feedBodyElem}\r\n        {feedFooterElem}\r\n      </Stack>\r\n      {data.isInnerArticleShow ? (\r\n        <ArticlePane className=\"relative z-10 border-b bg-gray-50\" />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedItem;\r\n","D:\\workspace\\fread\\src\\page\\feed\\subscriptionInfoCard.tsx",[],"D:\\workspace\\fread\\src\\page\\feed\\feedShimmer.tsx",[],"D:\\workspace\\fread\\src\\context\\userInfo.ts",[],"D:\\workspace\\fread\\src\\page\\home\\AddFeed.tsx",[],"D:\\workspace\\fread\\src\\api\\mockData.ts",["144","145","146"],"import Mock from \"mockjs\";\r\nimport { IdValuePair } from \"../api/inoreader\";\r\nimport MockAdapter from \"axios-mock-adapter\";\r\nimport { Sortable } from \"../page/feed/overviewPane\";\r\n\r\nconst Random = Mock.Random;\r\n\r\nconst USER_ID = \"1006201176\";\r\n\r\nexport interface Label {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface Tag extends Sortable {\r\n  id: string;\r\n  type?: string;\r\n  unread_count?: number;\r\n  unseen_count?: number;\r\n}\r\n\r\nexport interface Subscription extends Sortable {\r\n  categories: Label[];\r\n  feedType: string;\r\n  htmlUrl: string;\r\n  iconUrl: string;\r\n  id: string;\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\nexport interface Feed {\r\n  id: string;\r\n  published: number;\r\n  origin: {\r\n    htmlUrl: string;\r\n    streamId: string;\r\n    title: string;\r\n  };\r\n  summary: {\r\n    content: string;\r\n    direction: string;\r\n  };\r\n  canonical: { href: string }[];\r\n  title: string;\r\n  alternate: { href: string; type: string }[];\r\n  annotations: any[];\r\n  author: string;\r\n  categories: string[];\r\n  comments: any[];\r\n  commentsNum: number;\r\n  crawlTimeMsec: string;\r\n  likingUsers: any[];\r\n  timestampUsec: string;\r\n  updated: number;\r\n}\r\n\r\nconst createSubscription = (\r\n  id: string,\r\n  sortid: string,\r\n  type: string,\r\n  { url, iconUrl, title }\r\n): Subscription => {\r\n  return {\r\n    categories: [{ id: \"user/1006201176/label/独立博客\", label: \"独立博客\" }],\r\n    feedType: type,\r\n    htmlUrl: url,\r\n    iconUrl,\r\n    id,\r\n    sortid: sortid,\r\n    title: title,\r\n    url: url,\r\n  };\r\n};\r\n\r\nconst createIdValuePair = (id: string, value: string): IdValuePair => ({\r\n  id,\r\n  value,\r\n});\r\n\r\nconst createStreampref = (sortids: string, isRoot?: boolean): IdValuePair[] => {\r\n  let result: IdValuePair[] = [];\r\n\r\n  if (!isRoot) {\r\n    result.push(createIdValuePair(\"is-expanded\", \"true\"));\r\n  }\r\n  result.push(createIdValuePair(\"subscription-ordering\", sortids));\r\n  return result;\r\n};\r\n\r\nconst generateStreamId = (url: string): string => `feed/${url}`;\r\n\r\nconst isVaildStreamId = (id: string): boolean => id.startsWith(\"feed/\");\r\n\r\nconst generateTagId = (userId: string, name: string): string =>\r\n  `user/${userId}/label/${name}`;\r\n\r\nconst isVaildTagId = (id: string): boolean =>\r\n  /user\\/\\d{6,10}\\/label\\/.*/.test(id);\r\n\r\nconst generateSystemTagId = (userId: string, name: string): string =>\r\n  `user/${userId}/state/com.google/${name}`;\r\n\r\nconst isVaildSystemTagId = (id: string): boolean =>\r\n  /user\\/\\d{6,10}\\/state\\/com.google\\/.*/.test(id);\r\n\r\nconst generateFeedId = (id): string => `tag:google.com,2005:reader/item/${id}`;\r\n\r\nconst createTag = (\r\n  id,\r\n  sortid,\r\n  type = \"folder\",\r\n  { unreadCount, unseenCount } = { unreadCount: 0, unseenCount: 0 }\r\n): Tag => {\r\n  return {\r\n    id,\r\n    sortid,\r\n    type,\r\n    unread_count: unreadCount,\r\n    unseen_count: unseenCount,\r\n  };\r\n};\r\n\r\nconst _getTags = (number: number): Tag[] => {\r\n  let result: Tag[] = [];\r\n  for (let index = 0; index < number; index++) {\r\n    const title = Random.word();\r\n    const idSeed = Random.id();\r\n    const sortId = idSeed.slice(idSeed.length - 8, idSeed.length);\r\n    const tagId = generateTagId(USER_ID, title);\r\n    const type = Random.pick([\"folder\", \"tag\"]);\r\n    result.push(createTag(tagId, sortId, type));\r\n  }\r\n  return result;\r\n};\r\n\r\nconst _getSubscriptions = (number: number): Subscription[] => {\r\n  let result: Subscription[] = [];\r\n  for (let index = 0; index < number; index++) {\r\n    const Random = Mock.Random;\r\n    const title = Random.word();\r\n    const id = Random.id();\r\n    const url = `https://www.${title}.com/feed`;\r\n    const sortId = id.slice(id.length - 8, id.length);\r\n    const streamId = generateStreamId(url);\r\n    const type = Random.pick([\"folder, tag\"]);\r\n    result.push(\r\n      createSubscription(streamId, sortId, type, {\r\n        url,\r\n        iconUrl: \"\",\r\n        title: title,\r\n      })\r\n    );\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst createFeed = (): Feed => {\r\n  const randomId = Random.id().slice(0, 16);\r\n  return {\r\n    alternate: [\r\n      { href: \"https://t.bilibili.com/534520310768667380\", type: \"text/html\" },\r\n    ],\r\n    annotations: [],\r\n    author: Random.name(),\r\n    canonical: [{ href: \"https://t.bilibili.com/534520310768667380\" }],\r\n    categories: [\r\n      \"user/1006201176/state/com.google/reading-list\",\r\n      \"user/1006201176/state/com.google/fresh\",\r\n    ],\r\n    comments: [],\r\n    commentsNum: -1,\r\n    crawlTimeMsec: \"1623293901497\",\r\n    id: generateFeedId(randomId),\r\n    likingUsers: [],\r\n    origin: {\r\n      htmlUrl: \"https://space.bilibili.com/15982391/dynamic\",\r\n      streamId:\r\n        \"feed/http://47.115.60.250:1200/bilibili/user/dynamic/15982391?filter=%E5%81%A5%E5%BA%B7%E6%97%A5%E5%8E%86\",\r\n      title: Random.title(1, 3),\r\n    },\r\n    published: 1623291108,\r\n    summary: {\r\n      content: Random.paragraph(),\r\n      direction: \"ltr\",\r\n    },\r\n    timestampUsec: \"1623293901496534\",\r\n    title: Random.title(1, 6),\r\n    updated: 0,\r\n  };\r\n};\r\n\r\nconst _getFeeds = (number: number) => {\r\n  let result: any[] = [];\r\n  for (let index = 0; index < number; index++) {\r\n    result.push(createFeed());\r\n  }\r\n  return result;\r\n};\r\n\r\nconst tags = _getTags(10);\r\nconst feeds = _getFeeds(10);\r\nconst rootTagId = generateSystemTagId(USER_ID, \"root\");\r\nconst streamprefs = {};\r\nstreamprefs[rootTagId] = createStreampref(\"\", true);\r\nconst subscriptions = _getSubscriptions(10);\r\n\r\nfor (let index = 0; index < tags.length; index++) {\r\n  const tag = tags[index];\r\n  const subscription = subscriptions[index];\r\n  const streampref = createStreampref(subscription.sortid);\r\n  streamprefs[rootTagId][0].value += tag.sortid;\r\n  streamprefs[tag.id] = streampref;\r\n}\r\n\r\nexport const mockSetup = (axios) => {\r\n  const mock = new MockAdapter(axios, { onNoMatch: \"passthrough\" });\r\n\r\n  mock.onGet(/^.*user-info$/).reply(200, {\r\n    isBloggerUser: false,\r\n    isMultiLoginEnabled: false,\r\n    signupTimeSec: 1516257049,\r\n    userEmail: \"1119548217@qq.com\",\r\n    userId: USER_ID,\r\n    userName: \"1119548217\",\r\n    userProfileId: USER_ID,\r\n  });\r\n\r\n  mock.onGet(/^.*subscription\\/list/).reply(200, {\r\n    subscriptions: subscriptions,\r\n  });\r\n\r\n  mock.onGet(/^.*tag\\/list/).reply(200, {\r\n    tags: tags,\r\n  });\r\n\r\n  mock.onGet(/^.*stream\\/contents/).reply(200, {\r\n    items: feeds,\r\n  });\r\n\r\n  mock.onGet(/^.*preference\\/stream\\/list/).reply(200, {\r\n    streamprefs: streamprefs,\r\n  });\r\n\r\n  mock.onPost(/^.*edit-tag/).reply(200, \"ok\");\r\n\r\n  return mock;\r\n};\r\n","D:\\workspace\\fread\\src\\page\\home\\viewSettingPane.tsx",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":10,"column":6,"nodeType":"153","endLine":10,"endColumn":8,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":63,"column":20,"nodeType":"157","messageId":"158","endLine":63,"endColumn":30},{"ruleId":"155","severity":1,"message":"159","line":66,"column":9,"nodeType":"157","messageId":"158","endLine":66,"endColumn":32},{"ruleId":"155","severity":1,"message":"160","line":75,"column":9,"nodeType":"157","messageId":"158","endLine":75,"endColumn":26},{"ruleId":"155","severity":1,"message":"161","line":41,"column":10,"nodeType":"157","messageId":"158","endLine":41,"endColumn":32},{"ruleId":"155","severity":1,"message":"162","line":9,"column":3,"nodeType":"157","messageId":"158","endLine":9,"endColumn":15},{"ruleId":"155","severity":1,"message":"163","line":93,"column":7,"nodeType":"157","messageId":"158","endLine":93,"endColumn":22},{"ruleId":"155","severity":1,"message":"164","line":98,"column":7,"nodeType":"157","messageId":"158","endLine":98,"endColumn":19},{"ruleId":"155","severity":1,"message":"165","line":104,"column":7,"nodeType":"157","messageId":"158","endLine":104,"endColumn":25},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toggle'. Either include it or remove the dependency array.","ArrayExpression",["168"],"@typescript-eslint/no-unused-vars","'setSetting' is assigned a value but never used.","Identifier","unusedVar","'setSubscriptionDataById' is assigned a value but never used.","'setFolderDataById' is assigned a value but never used.","'currenActivedFeedIndex' is assigned a value but never used.","'IButtonProps' is defined but never used.","'isVaildStreamId' is assigned a value but never used.","'isVaildTagId' is assigned a value but never used.","'isVaildSystemTagId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Update the dependencies array to be: [toggle]",{"range":"171","text":"172"},[239,241],"[toggle]"]