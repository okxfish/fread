[{"D:\\workspace\\fread\\src\\index.tsx":"1","D:\\workspace\\fread\\src\\reportWebVitals.ts":"2","D:\\workspace\\fread\\src\\App.tsx":"3","D:\\workspace\\fread\\src\\page\\home\\index.tsx":"4","D:\\workspace\\fread\\src\\component\\overviewPane\\index.tsx":"5","D:\\workspace\\fread\\src\\component\\feedsPane\\index.tsx":"6","D:\\workspace\\fread\\src\\component\\articlePane\\index.tsx":"7","D:\\workspace\\fread\\src\\component\\feedsPane\\container.tsx":"8","D:\\workspace\\fread\\src\\component\\feedsPane\\component.tsx":"9","D:\\workspace\\fread\\src\\mock\\feed.ts":"10"},{"size":589,"mtime":1609139171362,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1608688701570,"results":"13","hashOfConfig":"12"},{"size":515,"mtime":1609140085220,"results":"14","hashOfConfig":"12"},{"size":1148,"mtime":1609327244028,"results":"15","hashOfConfig":"12"},{"size":5034,"mtime":1608885768349,"results":"16","hashOfConfig":"12"},{"size":77,"mtime":1609117670463,"results":"17","hashOfConfig":"12"},{"size":5191,"mtime":1609327148745,"results":"18","hashOfConfig":"12"},{"size":4437,"mtime":1609325438910,"results":"19","hashOfConfig":"12"},{"size":5035,"mtime":1609325567950,"results":"20","hashOfConfig":"12"},{"size":835,"mtime":1609323907381,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"g8k65s",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\workspace\\fread\\src\\index.tsx",[],["47","48"],"D:\\workspace\\fread\\src\\reportWebVitals.ts",[],"D:\\workspace\\fread\\src\\App.tsx",[],"D:\\workspace\\fread\\src\\page\\home\\index.tsx",["49"],"import React, { useState } from \"react\";\r\nimport { default as OverviewPane } from \"../../component/overviewPane\";\r\nimport { default as FeedsPane } from \"../../component/feedsPane\";\r\nimport { default as ArticlePane } from \"../../component/articlePane\";\r\nimport { Modal } from \"office-ui-fabric-react\";\r\nimport feedsMockData from \"../../mock/feed\";\r\n\r\nconst Home = () => {\r\n  const [isArticleModalOpen, setIsArticleModalOpen] = useState<boolean>(false);\r\n  const hideModal = (): void => setIsArticleModalOpen(false);\r\n  const openModal = (): void => setIsArticleModalOpen(true);\r\n\r\n  return (\r\n    <div className=\"flex h-screen\">\r\n      <div className=\"w-2/12\">\r\n        <OverviewPane />\r\n      </div>\r\n      <div className=\"scrollbar w-10/12 h-full overflow-x-auto\">\r\n        <FeedsPane\r\n          className=\" w-2/4 bg-gray-100 mx-auto\"\r\n          onClickFeed={openModal}\r\n        />\r\n      </div>\r\n      <Modal\r\n        isOpen={isArticleModalOpen}\r\n        onDismiss={hideModal}\r\n        isBlocking={false}\r\n      >\r\n        <ArticlePane className=\"px-6\" style={{maxHeight: '95vh'}}/>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\workspace\\fread\\src\\component\\overviewPane\\index.tsx",["50"],"import React from \"react\";\r\nimport {\r\n  GroupedList,\r\n  IGroupRenderProps,\r\n  IGroupHeaderProps,\r\n} from \"office-ui-fabric-react/lib/GroupedList\";\r\nimport {\r\n  CommandBarButton,\r\n  IIconProps,\r\n  IContextualMenuProps,\r\n} from \"office-ui-fabric-react\";\r\nimport { FontIcon } from \"office-ui-fabric-react/lib/Icon\";\r\nimport { Separator } from \"office-ui-fabric-react/lib/Separator\";\r\nimport {\r\n  CommandBar,\r\n  ICommandBarItemProps,\r\n} from \"office-ui-fabric-react/lib/CommandBar\";\r\nimport { SelectionMode } from \"office-ui-fabric-react/lib/Selection\";\r\nimport { createGroups } from \"@fluentui/example-data\";\r\nimport \"./style.css\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n}\r\n\r\nconst groupCount = 3;\r\nconst groupDepth = 1;\r\nconst createItems = (count: number): any[] => {\r\n  return Array.from({\r\n    length: count,\r\n  }).map((item: any, index: number): any => ({\r\n    key: index,\r\n    unreadCount: 2,\r\n    title: `this is rss source: ${index}`,\r\n  }));\r\n};\r\n\r\nconst items: any[] = createItems(Math.pow(groupCount, groupDepth + 1));\r\nconst groups = createGroups(groupCount, groupDepth, 0, groupCount);\r\nconst listItemClassName =\r\n  \"cursor-pointer items-center h-10 text-base flex hover:bg-gray-200 select-none\";\r\n\r\nconst commandBarItems: ICommandBarItemProps[] = [\r\n  {\r\n    key: \"newItem\",\r\n    text: \"New\",\r\n    cacheKey: \"myCacheKey\", // changing this key will invalidate this item's cache\r\n    iconProps: { iconName: \"Add\" },\r\n    subMenuProps: {\r\n      items: [\r\n        {\r\n          key: \"emailMessage\",\r\n          text: \"Email message\",\r\n          iconProps: { iconName: \"Mail\" },\r\n          [\"data-automation-id\"]: \"newEmailButton\", // optional\r\n        },\r\n        {\r\n          key: \"calendarEvent\",\r\n          text: \"Calendar event\",\r\n          iconProps: { iconName: \"Calendar\" },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    key: \"upload\",\r\n    text: \"Upload\",\r\n    iconProps: { iconName: \"Upload\" },\r\n    href: \"https://developer.microsoft.com/en-us/fluentui\",\r\n  },\r\n  {\r\n    key: \"share\",\r\n    text: \"Share\",\r\n    iconProps: { iconName: \"Share\" },\r\n    onClick: () => console.log(\"Share\"),\r\n  },\r\n  {\r\n    key: \"download\",\r\n    text: \"Download\",\r\n    iconProps: { iconName: \"Download\" },\r\n    onClick: () => console.log(\"Download\"),\r\n  },\r\n];\r\n\r\nconst moreIcon: IIconProps = { iconName: \"More\" };\r\n\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"emailMessage\",\r\n      text: \"rename\",\r\n      iconProps: { iconName: \"Edit\" },\r\n    },\r\n    {\r\n      key: \"calendarEvent\",\r\n      text: \"Calendar event\",\r\n      iconProps: { iconName: \"Calendar\" },\r\n    },\r\n  ],\r\n};\r\n\r\nconst OverviewPane = ({ className }: Props) => {\r\n  const onRenderCell = (\r\n    nestingDepth?: number,\r\n    item?: any,\r\n    itemIndex?: number\r\n  ): React.ReactNode => {\r\n    return item && typeof itemIndex === \"number\" && itemIndex > -1 ? (\r\n      <div\r\n        className={`${listItemClassName}`}\r\n        style={{ paddingLeft: `${2 * (nestingDepth || 1)}rem` }}\r\n      >\r\n        <FontIcon className=\"mr-2\" iconName=\"Dictionary\" />\r\n        {item.title}\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const groupProps: IGroupRenderProps = {\r\n    onRenderHeader: (props?: IGroupHeaderProps): JSX.Element | null => {\r\n      console.log(props);\r\n      if (props && props.group) {\r\n        const toggleCollapse = (): void => {\r\n          props.onToggleCollapse!(props.group!);\r\n        };\r\n\r\n        let unreadCount: number = 0;\r\n        const children = items.slice(\r\n          props.group.startIndex,\r\n          props.group.startIndex + props.group.count\r\n        );\r\n        children.forEach((item) => {\r\n          unreadCount += item.unreadCount;\r\n        });\r\n        return (\r\n          <div\r\n            className={`${listItemClassName} pl-2 border-l-4 border-blue-600`}\r\n          >\r\n            <FontIcon\r\n              className={`mr-2 transition-all transform ${\r\n                props.group!.isCollapsed ? \"\" : \"rotate-90\"\r\n              }`}\r\n              iconName=\"ChevronRight\"\r\n              onClick={toggleCollapse}\r\n            />\r\n            <span className=\"flex-1\" onClick={toggleCollapse}>\r\n              {props.group!.name} ({unreadCount})\r\n            </span>\r\n            <CommandBarButton\r\n              className=\"mr-4 bg-transparent hover:bg-transparent active:bg-transparent focus:bg-transparent focus:outline-none\"\r\n              menuProps={menuProps}\r\n              iconProps={moreIcon}\r\n              onRenderMenuIcon={()=>null}\r\n            />\r\n          </div>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <Separator alignContent=\"start\">sources</Separator>\r\n      <GroupedList\r\n        className=\"flex-1\"\r\n        items={items}\r\n        onRenderCell={onRenderCell}\r\n        groupProps={groupProps}\r\n        selectionMode={SelectionMode.none}\r\n        groups={groups}\r\n      />\r\n      <div></div>\r\n      <CommandBar items={commandBarItems} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverviewPane;\r\n","D:\\workspace\\fread\\src\\component\\feedsPane\\index.tsx",[],"D:\\workspace\\fread\\src\\component\\articlePane\\index.tsx",[],"D:\\workspace\\fread\\src\\component\\feedsPane\\container.tsx",[],"D:\\workspace\\fread\\src\\component\\feedsPane\\component.tsx",["51","52","53","54"],"import { default as React, Dispatch } from \"react\";\r\nimport {\r\n  Text,\r\n  Image,\r\n  ImageFit,\r\n  IconButton,\r\n  IIconProps,\r\n  Panel,\r\n  PanelType,\r\n  IContextualMenuProps,\r\n  FontIcon,\r\n  IGroup,\r\n  IImageProps,\r\n  GroupedList,\r\n  IGroupRenderProps,\r\n  IGroupHeaderProps,\r\n} from \"office-ui-fabric-react\";\r\nimport { FeedProps } from \"./types\";\r\nexport interface Props {\r\n  className?: string;\r\n  onClickFeed?(): any;\r\n  items: FeedProps[];\r\n  groups: IGroup[];\r\n  isSidePaneOpen: boolean;\r\n  dispatch: Dispatch<any>;\r\n}\r\n\r\nconst moreIcon: IIconProps = { iconName: \"More\" };\r\nconst favoriteStarIcon: IIconProps = { iconName: \"FavoriteStar\" };\r\nconst favoriteStarFillIcon: IIconProps = { iconName: \"FavoriteStarFill\" };\r\nconst pinSolid12Icon: IIconProps = { iconName: \"PinSolid12\" };\r\nconst pinSolidOff12Icon: IIconProps = { iconName: \"PinSolidOff12\" };\r\nconst readingModeIcon: IIconProps = { iconName: \"ReadingMode\" };\r\nconst readingModeSolidIcon: IIconProps = { iconName: \"ReadingModeSolid\" };\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"emailMessage\",\r\n      text: \"Email message\",\r\n      iconProps: { iconName: \"Mail\" },\r\n    },\r\n    {\r\n      key: \"calendarEvent\",\r\n      text: \"Calendar event\",\r\n      iconProps: { iconName: \"Calendar\" },\r\n    },\r\n  ],\r\n  directionalHintFixed: true,\r\n};\r\n\r\nconst FeedsPane = ({\r\n  className,\r\n  items,\r\n  groups,\r\n  onClickFeed,\r\n  isSidePaneOpen,\r\n  dispatch,\r\n}: Props) => {\r\n  const onRenderCell = (\r\n    nestingDepth?: number,\r\n    item?: FeedProps,\r\n    itemIndex?: number\r\n  ): React.ReactNode => {\r\n    const imageProps: IImageProps = {\r\n      src: item?.thumbnailSrc ,\r\n      width: 100,\r\n      height: 100,\r\n      imageFit: ImageFit.cover,\r\n    };\r\n    \r\n    const toggleIsReadById = (id: string): void =>\r\n      dispatch({ type: \"feed/ById/toggleIsRead\", payload: id });\r\n\r\n    const toggleIsStarById = (id: string): void =>\r\n      dispatch({ type: \"feed/ById/toggleIsStar\", payload: id });\r\n\r\n    const toggleIsPinById = (id: string): void =>\r\n      dispatch({ type: \"feed/ById/toggleIsPin\", payload: id });\r\n\r\n    return item && typeof itemIndex === \"number\" && itemIndex > -1 ? (\r\n      <div className=\"flex border-b border-gray-300 pt-4 pb-4 cursor-pointer group hover:bg-gray-200\" onClick={onClickFeed}>\r\n        <Image className=\"flex-shrink-0 mr-3\" {...imageProps} />\r\n        <div className=\"flex-1\">\r\n          <div className=\"relative flex items-start mb-2 text-lg text-gray-800 leading-none font-medium\">\r\n            <span className=\"flex-1\">{item.title}</span>\r\n          </div>\r\n          <div className=\"text-base text-gray-600\">{item.summary}</div>\r\n          <div className=\"flex items-center justify-end w-full\">\r\n            <div className=\"flex-1 text-sm text-gray-400\">\r\n              <span className=\"pr-1\">{item.sourceName}</span>\r\n              <span>/</span>\r\n              <span className=\"pl-1\">{item.time}</span>\r\n            </div>\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              iconProps={item.isPin ? pinSolid12Icon : pinSolidOff12Icon}\r\n              title=\"pin as unread\"\r\n              ariaLabel=\"Pin as unread\"\r\n              disabled={false}\r\n              onClick={toggleIsPinById.bind(null, item.key)}\r\n            />\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              iconProps={item.isStar ? favoriteStarFillIcon : favoriteStarIcon}\r\n              title=\"favorite\"\r\n              ariaLabel=\"Favorite\"\r\n              disabled={false}\r\n              onClick={toggleIsStarById.bind(null, item.key)}\r\n            />\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              iconProps={item.isRead ? readingModeSolidIcon : readingModeIcon}\r\n              title=\"mark as read\"\r\n              ariaLabel=\"Mark as read\"\r\n              disabled={false}\r\n              onClick={toggleIsReadById.bind(null, item.key)}\r\n            />\r\n            <IconButton\r\n              className=\"focus:outline-none\"\r\n              menuProps={menuProps}\r\n              iconProps={moreIcon}\r\n              onRenderMenuIcon={() => null}\r\n              title=\"more\"\r\n              ariaLabel=\"More\"\r\n              disabled={false}\r\n              checked={false}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const onRenderHeader = (props?: IGroupHeaderProps): JSX.Element | null => {\r\n    if (props && props.group) {\r\n      return (\r\n        <div className=\"cursor-pointer text-gray-600 text-lg font-bold leading-loose border-b border-gray-600\">\r\n          {props.group!.name}\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const groupProps: IGroupRenderProps = {\r\n    onRenderHeader: onRenderHeader,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GroupedList\r\n        className={`${className} px-6`}\r\n        items={items}\r\n        onRenderCell={onRenderCell}\r\n        groupProps={groupProps}\r\n        groups={groups}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedsPane;\r\n",["55","56"],"D:\\workspace\\fread\\src\\mock\\feed.ts",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":8,"nodeType":"63","messageId":"64","endLine":6,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":55,"column":11,"nodeType":"67","messageId":"68","endLine":55,"endColumn":51,"fix":"69"},{"ruleId":"61","severity":1,"message":"70","line":3,"column":3,"nodeType":"63","messageId":"64","endLine":3,"endColumn":7},{"ruleId":"61","severity":1,"message":"71","line":8,"column":3,"nodeType":"63","messageId":"64","endLine":8,"endColumn":8},{"ruleId":"61","severity":1,"message":"72","line":9,"column":3,"nodeType":"63","messageId":"64","endLine":9,"endColumn":12},{"ruleId":"61","severity":1,"message":"73","line":11,"column":3,"nodeType":"63","messageId":"64","endLine":11,"endColumn":11},{"ruleId":"57","replacedBy":"74"},{"ruleId":"59","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"@typescript-eslint/no-unused-vars","'feedsMockData' is defined but never used.","Identifier","unusedVar","no-useless-computed-key","Unnecessarily computed property [\"data-automation-id\"] found.","Property","unnecessarilyComputedProperty",{"range":"78","text":"79"},"'Text' is defined but never used.","'Panel' is defined but never used.","'PanelType' is defined but never used.","'FontIcon' is defined but never used.",["76"],["77"],"no-global-assign","no-unsafe-negation",[1607,1629],"\"data-automation-id\""]