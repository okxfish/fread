[{"D:\\workspace\\fread\\src\\index.tsx":"1","D:\\workspace\\fread\\src\\App.tsx":"2","D:\\workspace\\fread\\src\\context\\viewType.ts":"3","D:\\workspace\\fread\\src\\utils\\useInoreaderToken.tsx":"4","D:\\workspace\\fread\\src\\page\\oauth\\index.tsx":"5","D:\\workspace\\fread\\src\\component\\bookFilp\\index.tsx":"6","D:\\workspace\\fread\\src\\page\\home\\index.tsx":"7","D:\\workspace\\fread\\src\\page\\login\\index.tsx":"8","D:\\workspace\\fread\\src\\utils\\useSearchParma.tsx":"9","D:\\workspace\\fread\\src\\api\\index.ts":"10","D:\\workspace\\fread\\src\\page\\home\\sideBar.tsx":"11","D:\\workspace\\fread\\src\\api\\inoreader.ts":"12","D:\\workspace\\fread\\src\\api\\auth.ts":"13","D:\\workspace\\fread\\src\\page\\feed\\index.tsx":"14","D:\\workspace\\fread\\src\\page\\home\\sideBarItem.tsx":"15","D:\\workspace\\fread\\src\\page\\feed\\container.tsx":"16","D:\\workspace\\fread\\src\\context\\article.ts":"17","D:\\workspace\\fread\\src\\context\\feed.ts":"18","D:\\workspace\\fread\\src\\page\\feed\\reducer.ts":"19","D:\\workspace\\fread\\src\\page\\feed\\utils.ts":"20","D:\\workspace\\fread\\src\\page\\feed\\component.tsx":"21","D:\\workspace\\fread\\src\\component\\articlePane\\index.tsx":"22","D:\\workspace\\fread\\src\\component\\feedsPane\\index.tsx":"23","D:\\workspace\\fread\\src\\component\\overviewPane\\index.tsx":"24","D:\\workspace\\fread\\src\\component\\overviewPane\\overviewCell.tsx":"25","D:\\workspace\\fread\\src\\component\\feedsPane\\feedItem.tsx":"26"},{"size":978,"mtime":1622043874284,"results":"27","hashOfConfig":"28"},{"size":2351,"mtime":1621517198947,"results":"29","hashOfConfig":"28"},{"size":173,"mtime":1612080432070,"results":"30","hashOfConfig":"28"},{"size":752,"mtime":1621046572974,"results":"31","hashOfConfig":"28"},{"size":607,"mtime":1621092202191,"results":"32","hashOfConfig":"28"},{"size":805,"mtime":1612179586603,"results":"33","hashOfConfig":"28"},{"size":995,"mtime":1621342847210,"results":"34","hashOfConfig":"28"},{"size":2163,"mtime":1621094218545,"results":"35","hashOfConfig":"28"},{"size":1027,"mtime":1610625825207,"results":"36","hashOfConfig":"28"},{"size":1623,"mtime":1621342847163,"results":"37","hashOfConfig":"28"},{"size":6143,"mtime":1621610769974,"results":"38","hashOfConfig":"28"},{"size":3913,"mtime":1622043874276,"results":"39","hashOfConfig":"28"},{"size":391,"mtime":1621089632015,"results":"40","hashOfConfig":"28"},{"size":63,"mtime":1612093401123,"results":"41","hashOfConfig":"28"},{"size":1356,"mtime":1613462082109,"results":"42","hashOfConfig":"28"},{"size":8349,"mtime":1622049627499,"results":"43","hashOfConfig":"28"},{"size":90,"mtime":1612080206605,"results":"44","hashOfConfig":"28"},{"size":87,"mtime":1612080267585,"results":"45","hashOfConfig":"28"},{"size":426,"mtime":1622043874376,"results":"46","hashOfConfig":"28"},{"size":400,"mtime":1621610769969,"results":"47","hashOfConfig":"28"},{"size":3745,"mtime":1622048729126,"results":"48","hashOfConfig":"28"},{"size":2525,"mtime":1622043874282,"results":"49","hashOfConfig":"28"},{"size":4545,"mtime":1622048856841,"results":"50","hashOfConfig":"28"},{"size":8438,"mtime":1621610769964,"results":"51","hashOfConfig":"28"},{"size":746,"mtime":1611989666162,"results":"52","hashOfConfig":"28"},{"size":4968,"mtime":1622049076778,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"59lj7j",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"99"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\workspace\\fread\\src\\index.tsx",[],"D:\\workspace\\fread\\src\\App.tsx",[],"D:\\workspace\\fread\\src\\context\\viewType.ts",[],"D:\\workspace\\fread\\src\\utils\\useInoreaderToken.tsx",[],"D:\\workspace\\fread\\src\\page\\oauth\\index.tsx",[],"D:\\workspace\\fread\\src\\component\\bookFilp\\index.tsx",["109"],"D:\\workspace\\fread\\src\\page\\home\\index.tsx",["110"],"D:\\workspace\\fread\\src\\page\\login\\index.tsx",[],"D:\\workspace\\fread\\src\\utils\\useSearchParma.tsx",[],"D:\\workspace\\fread\\src\\api\\index.ts",[],"D:\\workspace\\fread\\src\\page\\home\\sideBar.tsx",["111"],"D:\\workspace\\fread\\src\\api\\inoreader.ts",[],"D:\\workspace\\fread\\src\\api\\auth.ts",[],"D:\\workspace\\fread\\src\\page\\feed\\index.tsx",[],"D:\\workspace\\fread\\src\\page\\home\\sideBarItem.tsx",[],"D:\\workspace\\fread\\src\\page\\feed\\container.tsx",["112"],"D:\\workspace\\fread\\src\\context\\article.ts",[],"D:\\workspace\\fread\\src\\context\\feed.ts",[],"D:\\workspace\\fread\\src\\page\\feed\\reducer.ts",[],"D:\\workspace\\fread\\src\\page\\feed\\utils.ts",[],"D:\\workspace\\fread\\src\\page\\feed\\component.tsx",[],"D:\\workspace\\fread\\src\\component\\articlePane\\index.tsx",["113"],"import React, {\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport { IconButton, IIconProps } from \"office-ui-fabric-react\";\r\nimport { Parser as HtmlToReactParser } from \"html-to-react\";\r\nimport { FeedItem } from \"./../feedsPane/types\";\r\nimport { default as dayjs } from \"dayjs\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n  closeModal?(): any;\r\n  article?: FeedItem;\r\n  style?: {\r\n    [prop: string]: string;\r\n  };\r\n}\r\n\r\nconst backIcon: IIconProps = { iconName: \"Back\" };\r\n\r\nconst ArticlePane = forwardRef(\r\n  ({ className, style, article, closeModal }: Props, ref) => {\r\n    const htmlToReactParserRef = useRef(new HtmlToReactParser());\r\n    const [contentJSX, setContentJSX] = useState<JSX.Element | null>(null);\r\n    const rootNodeRef = useRef<any>(null);\r\n\r\n    useImperativeHandle(ref, () => rootNodeRef.current);\r\n\r\n    const htmlContent = article?.content;\r\n    useEffect(() => {\r\n      const parse = htmlToReactParserRef.current.parse;\r\n      setContentJSX(parse(htmlContent));\r\n    }, [htmlContent]);\r\n\r\n    const contentRender = () => {\r\n      return (\r\n        <div className=\"flex flex-col h-full overflow-y-hidden\">\r\n          <div className=\"flex items-center h-10 border-b mx-6\">\r\n            <IconButton\r\n              className=\"block lg:hidden\"\r\n              iconProps={backIcon}\r\n              onClick={closeModal}\r\n            />\r\n          </div>\r\n          <div className=\"article-wrapper overflow-y-scroll scrollbar flex-1 px-6\">\r\n            <article className=\"max-w-3xl w-full mx-auto py-4\">\r\n              <header className=\"mb-4\">\r\n                <h2 className=\"font-bold text-3xl break-words leading-10 mb-4\">\r\n                  <a href={article?.url} target=\"_blank\" rel=\"noreferrer\">\r\n                    {article?.title}\r\n                  </a>\r\n                </h2>\r\n                <div className=\"text-sm font-normal text-gray-400 flex align-middle\">\r\n                  <div className=\"mr-2\">{article?.sourceName}</div>\r\n                  <div className=\"mr-2\">Publish at {article?.publishedTime.format(\"YYYY-M-D H:m\")}</div>\r\n                </div>\r\n              </header>\r\n              <div>{contentJSX}</div>\r\n              <footer></footer>\r\n            </article>\r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div className={`${className}`} style={style} ref={rootNodeRef}>\r\n        {contentRender()}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default ArticlePane;\r\n",["114","115"],"D:\\workspace\\fread\\src\\component\\feedsPane\\index.tsx",[],"D:\\workspace\\fread\\src\\component\\overviewPane\\index.tsx",["116","117","118","119"],"import React from \"react\";\r\nimport {\r\n  GroupedList,\r\n  IGroupRenderProps,\r\n  IGroupHeaderProps,\r\n  CommandBarButton,\r\n  IIconProps,\r\n  FontIcon,\r\n  SelectionMode,\r\n  IContextualMenuProps,\r\n} from \"office-ui-fabric-react\";\r\nimport { createGroups } from \"@fluentui/example-data\";\r\nimport OverviewCell from \"./overviewCell\";\r\nimport \"./style.css\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useQuery, useQueryClient } from \"react-query\";\r\nimport { default as api } from \"../../api\";\r\nimport { default as get } from \"lodash.get\";\r\nimport { normalize, schema } from \"normalizr\";\r\nimport { IGroup } from \"@fluentui/react\";\r\nimport { produce } from \"immer\";\r\nimport queryString from \"query-string\";\r\nimport { SystemStreamIDs } from \"../../api/inoreader\";\r\n\r\nexport interface Props {\r\n  className?: string;\r\n}\r\n\r\nconst folder = new schema.Entity(\"folder\");\r\nconst subscription = new schema.Entity(\"subscription\", undefined, {\r\n  idAttribute: \"sortid\",\r\n});\r\n\r\nconst listItemClassName =\r\n  \"cursor-pointer items-center h-10 text-base flex hover:bg-gray-50 select-none\";\r\n\r\nconst moreIcon: IIconProps = { iconName: \"More\" };\r\n\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"renameFolder\",\r\n      text: \"rename\",\r\n      iconProps: { iconName: \"Edit\" },\r\n    },\r\n  ],\r\n};\r\n\r\nconst OverviewPane = ({ className }: Props) => {\r\n  const history = useHistory();\r\n  const commonPx = \"px-2\";\r\n  const queryClient = useQueryClient();\r\n\r\n  const setSubscriptionDataById = (streamId: string, updater: any): void =>\r\n    queryClient.setQueryData(\r\n      [\"home/subscriptionsListQuery\"],\r\n      produce((data) => {\r\n        const subscription = get(data, `entities.subscription['${streamId}']`);\r\n        updater(subscription);\r\n      })\r\n    );\r\n\r\n  const setFolderDataById = (folderId: string, updater: any): void =>\r\n    queryClient.setQueryData(\r\n      [\"home/folderQuery\"],\r\n      produce((data) => {\r\n        const folder = get(data, `entities.folder['${folderId}']`);\r\n        updater(folder);\r\n      })\r\n    );\r\n\r\n  const subscriptionsListQuery = useQuery(\r\n    \"home/subscriptionsListQuery\",\r\n    async () => {\r\n      const subscriptionList = await api.inoreader.getSubscriptionList();\r\n      const subscriptions = get(subscriptionList, \"data.subscriptions\");\r\n      const subscriptionsNormalized = normalize<any>(subscriptions, [\r\n        subscription,\r\n      ]);\r\n      return subscriptionsNormalized;\r\n    },\r\n    {\r\n      refetchOnWindowFocus: false,\r\n      placeholderData: {\r\n        entities: {},\r\n        result: [],\r\n      },\r\n    }\r\n  );\r\n\r\n  const folderQuery = useQuery(\r\n    \"home/folderQuery\",\r\n    async () => {\r\n      const res = await Promise.all([\r\n        api.inoreader.getFolderOrTagList(1, 1),\r\n        api.inoreader.getStreamPreferenceList(),\r\n      ]);\r\n      const tags = res[0].data.tags;\r\n      const folders = tags.filter((tag) => tag.type === \"folder\");\r\n      const foldersNormalized = normalize<any>(folders, [folder]);\r\n      const streamPreferences = res[1].data.streamprefs;\r\n      foldersNormalized.result.forEach((folderId) => {\r\n        const subscriptionOrdering = get(\r\n          streamPreferences,\r\n          `['${folderId}'][1].value`,\r\n          \"\"\r\n        );\r\n        const subscriptions = subscriptionOrdering.match(/.{1,8}/g);\r\n        const folder = get(foldersNormalized, `entities.folder['${folderId}']`);\r\n        folder.subscriptions = subscriptions;\r\n        folder.isCollapsed = false;\r\n      });\r\n      return foldersNormalized;\r\n    },\r\n    {\r\n      refetchOnWindowFocus: false,\r\n      placeholderData: {\r\n        entities: {},\r\n        result: [],\r\n      },\r\n    }\r\n  );\r\n\r\n  const onRenderCell = (\r\n    nestingDepth?: number,\r\n    item?: any,\r\n    itemIndex?: number\r\n  ): React.ReactNode => {\r\n    const onClick = (e: any) => {\r\n      history.push({\r\n        pathname: \"/feed\",\r\n        search: `streamId=${item.id}`,\r\n      });\r\n      if (typeof e.stopPropagation === \"function\") {\r\n        e.stopPropagation();\r\n      }\r\n    };\r\n    return item && typeof itemIndex === \"number\" && itemIndex > -1 ? (\r\n      <div\r\n        className={`${listItemClassName} hover:bg-gray-200 rounded-sm`}\r\n        style={{ paddingLeft: `${2 * (nestingDepth || 1)}rem` }}\r\n        onClick={onClick}\r\n      >\r\n        <img className=\"w-4 h-4 mr-2\" src={item.iconUrl} alt=\"\" />\r\n        <div className=\"truncate\">{item.title}</div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const groupProps: IGroupRenderProps = {\r\n    onRenderHeader: (props?: IGroupHeaderProps): JSX.Element | null => {\r\n      if (props && props.group) {\r\n        const toggleCollapse = (): void => {\r\n          setFolderDataById(props.group?.data.id, (folder) => {\r\n            folder.isCollapsed = !folder.isCollapsed;\r\n          });\r\n        };\r\n\r\n        return (\r\n          <div\r\n            className={`${listItemClassName} ${commonPx} hover:bg-gray-200 rounded-sm`}\r\n            onClick={toggleCollapse}\r\n          >\r\n            <FontIcon\r\n              className={`mr-2 transition-all transform ${\r\n                props.group!.isCollapsed ? \"\" : \"rotate-90\"\r\n              }`}\r\n              iconName=\"ChevronRight\"\r\n            />\r\n            <span className=\"flex-1\">\r\n              {props.group!.name} ({props.group?.data.unreadCount})\r\n            </span>\r\n            <CommandBarButton\r\n              className=\"bg-transparent hover:bg-transparent focus:bg-transparent focus:outline-none min-w-0\"\r\n              menuProps={menuProps}\r\n              iconProps={moreIcon}\r\n              onRenderMenuIcon={() => null}\r\n            />\r\n          </div>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n  };\r\n\r\n  const { groups, items }: { amount: number; groups: IGroup[]; items: any[] } =\r\n    folderQuery.data?.result.reduce(\r\n      ({ amount, groups, items }: any, folderId: string) => {\r\n        const foldEntity = get(\r\n          folderQuery,\r\n          `data.entities.folder['${folderId}']`\r\n        );\r\n        const idPartSplited: any[] = folderId.split(\"/\");\r\n        const name = idPartSplited[idPartSplited.length - 1];\r\n        const count = foldEntity.subscriptions.length;\r\n        items = items.concat(\r\n          foldEntity.subscriptions.map((subscriptionsId) =>\r\n            get(\r\n              subscriptionsListQuery,\r\n              `data.entities.subscription['${subscriptionsId}']`\r\n            )\r\n          )\r\n        );\r\n\r\n        groups.push({\r\n          key: foldEntity?.id,\r\n          name: name,\r\n          count: count,\r\n          startIndex: amount,\r\n          isCollapsed: foldEntity.isCollapsed,\r\n          data: {\r\n            unreadCount: foldEntity.unread_count,\r\n            id: foldEntity?.id,\r\n          },\r\n        });\r\n        return { amount: amount + count, groups, items };\r\n      },\r\n      { amount: 0, groups: [], items: [] }\r\n    );\r\n\r\n  return (\r\n    <div className={`${className} flex-1 flex flex-col min-h-0 cursor-pointer`}>\r\n      <OverviewCell\r\n        className={`${commonPx}`}\r\n        iconProps={{ iconName: \"PreviewLink\" }}\r\n        content=\"all\"\r\n        onClick={() => history.push(\"/feed\")}\r\n      />\r\n      <OverviewCell\r\n        className={`${commonPx}`}\r\n        iconProps={{ iconName: \"FavoriteStar\" }}\r\n        content=\"star\"\r\n        onClick={() =>\r\n          history.push({\r\n            pathname: \"/feed\",\r\n            search: queryString.stringify({\r\n              streamId: SystemStreamIDs.STARRED,\r\n              unreadOnly: \"0\",\r\n            }),\r\n          })\r\n        }\r\n      />\r\n      <OverviewCell\r\n        className={`${commonPx} bg-gray-50 rounded-t-lg rounded-b-none sm:bg-transparent sm:rounded-b-sm sm:rounded-t-sm`}\r\n        iconProps={{ iconName: \"Source\" }}\r\n        content=\"source\"\r\n        onFooterRender={() => (\r\n          <CommandBarButton\r\n            className=\"bg-transparent hover:bg-transparent focus:bg-transparent focus:outline-none min-w-0\"\r\n            menuProps={menuProps}\r\n            iconProps={moreIcon}\r\n            onRenderMenuIcon={() => null}\r\n          />\r\n        )}\r\n      />\r\n      <GroupedList\r\n        className=\"flex-1 border-b border-t overflow-y-auto scrollbar-none bg-gray-50 sm:bg-transparent\"\r\n        items={items || []}\r\n        onRenderCell={onRenderCell}\r\n        groupProps={groupProps}\r\n        selectionMode={SelectionMode.none}\r\n        groups={groups || []}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverviewPane;\r\n","D:\\workspace\\fread\\src\\component\\overviewPane\\overviewCell.tsx",[],"D:\\workspace\\fread\\src\\component\\feedsPane\\feedItem.tsx",[],{"ruleId":"120","severity":1,"message":"121","line":10,"column":6,"nodeType":"122","endLine":10,"endColumn":8,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":11,"column":9,"nodeType":"126","messageId":"127","endLine":11,"endColumn":20},{"ruleId":"124","severity":1,"message":"128","line":13,"column":3,"nodeType":"126","messageId":"127","endLine":13,"endColumn":12},{"ruleId":"124","severity":1,"message":"129","line":195,"column":9,"nodeType":"126","messageId":"127","endLine":195,"endColumn":43},{"ruleId":"124","severity":1,"message":"130","line":11,"column":21,"nodeType":"126","messageId":"127","endLine":11,"endColumn":26},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"124","severity":1,"message":"135","line":12,"column":10,"nodeType":"126","messageId":"127","endLine":12,"endColumn":22},{"ruleId":"124","severity":1,"message":"136","line":15,"column":22,"nodeType":"126","messageId":"127","endLine":15,"endColumn":33},{"ruleId":"124","severity":1,"message":"137","line":15,"column":35,"nodeType":"126","messageId":"127","endLine":15,"endColumn":48},{"ruleId":"124","severity":1,"message":"138","line":54,"column":9,"nodeType":"126","messageId":"127","endLine":54,"endColumn":32},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toggle'. Either include it or remove the dependency array.","ArrayExpression",["139"],"@typescript-eslint/no-unused-vars","'emptyRender' is assigned a value but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'handleArticleItemInnerArticleClose' is assigned a value but never used.","'dayjs' is defined but never used.","no-native-reassign",["140"],"no-negated-in-lhs",["141"],"'createGroups' is defined but never used.","'useLocation' is defined but never used.","'useRouteMatch' is defined but never used.","'setSubscriptionDataById' is assigned a value but never used.",{"desc":"142","fix":"143"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [toggle]",{"range":"144","text":"145"},[239,241],"[toggle]"]